#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 43072286-b59b-4d14-b827-44362642a3e4
# Source File: C:\Users\whiggs\Documents\technology operations\EE PowerShell\Script-remove-departeduser\remove-departeduser.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
owIAAB+LCAAAAAAABACFUl1PgzAUfV+y/0D6aAIMhtuMrIm6YPagM2PRR1PgblRLS1rYh7/eQpnZ
4tfLbc/tvef0njZcQiq2IA8zUhHc71lW+CTFG6SVFR94mkvB6QdkUxQRpgC1yYiyCuQUXTil8q6b
WJglM4u3L1i7WbdR6WgyObDSqfYVaoW01DNIRQXHvuOF7hF0Z1oF5jMcDAdj35+M7OTyKrGDzAvs
ZOKP7SAYjvxR4JMhBKHbFXet3QSrQwl4ELqn8EguWKblLPdUTXWgg9ZtTZmefIBwXBFZ1WUzjNH6
rdKKcyIbu1ay1m4tYQ0SeApRzdNKDzdFc74V72DfM5EQ9qrNQtjsVePcP+w/8MW52NkPhPJIyELz
rRE+ouYF/iL0Eb6rE5ouJOEbcF4oz8ROOU2rcm40/xZmVGrnhDw4GWNnXAYYy74sNmgh6YZywpqC
R1IAllDoP2ZnUGobIasVSH23UveE7rfifi90zz7lJ/g/xHOjAgAA#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2019 v5.6.160
     Generated on:       3/30/2019 4:57 PM
     Generated by:       whiggs
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2019
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
zgMAAB+LCAAAAAAABAC9k0tLw0AQgO/+iqXnsElIYyxsAtLSi6BiRL1utpOydB9ldrdl/72NSBUF
hR6WucyDmY95sScQ9gAYV9xzclKctKadVbScdVeEsAeUW2m4WksF91xD13uOPuzp3jmW/4pOKbfO
gR6UBDeZX47YaScsKjlk5OUTNKfFJBlZBuUDQmsgeOQqI4/hVELcQXy2OzDt0DS8FvV1uajmUNws
WH6u+gPSR+dBJ0DQV2k29ujo2qJ2KYDTjpJwkB+l2V6CKqqxHpuxLDd1wSv+L+pNqxQdLS1CkslJ
BOEtxh7wIAVcdBZ/zvBsffwXy7//b/cO+pAIJ84DAAA=#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------

	#This portion runs before the actual form loads.  It checks to see if the box windows sdk assemblies are present on the machine,
	#copies them to the machine if they are not, and then imports them into the current session.
	Remove-item -Path "$env:PROGRAMFILES\Windowspowershell\Modules\DepartModule" -Force -Recurse
	<#
	$assembly = '
	[IO.File]::WriteAllBytes("$env:TEMP\CubicOrange.Windows.Forms.ActiveDirectory.dll", [Convert]::FromBase64String($assembly))
	[System.Reflection.Assembly]::Load("System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	$publish = New-Object System.EnterpriseServices.Internal.Publish
	$publish.GacInstall("$env:TEMP\CubicOrange.Windows.Forms.ActiveDirectory.dll")
	$publish.RegisterAssembly("$env:TEMP\CubicOrange.Windows.Forms.ActiveDirectory.dll")
	#>
	<#
	Try
	{
		$modulepres3 = get-childitem "$env:ProgramFiles\WindowsPowerShell\Modules\DepartModule\*\lib\Newtonsoft.Json.dll" -ErrorAction Stop
		$newtonsoft = [System.Reflection.Assembly]::LoadFrom("$($modulepres3.FullName)")
		$onAssemblyResolveEventHandler = [System.ResolveEventHandler] {
			param ($sender,
				$e)
			# You can make this condition more or less version specific as suits your requirements
			if ($e.Name.StartsWith("Newtonsoft.Json"))
			{
				return $newtonsoft
			}
			foreach ($assembly in [System.AppDomain]::CurrentDomain.GetAssemblies())
			{
				if ($assembly.FullName -eq $e.Name)
				{
					return $assembly
				}
			}
			return $null
		}
		[System.AppDomain]::CurrentDomain.add_AssemblyResolve($onAssemblyResolveEventHandler)
	}
	Catch
	{
	}
	#>
	#--------------------------------------------------------------------------
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($hostinvocation -ne $null)
		{
			return Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			return Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	function Get-Scriptname
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($hostinvocation -ne $null)
		{
			return $hostinvocation.MyCommand.Name
		}
		else
		{
			return $script:MyInvocation.MyCommand.Name
		}
	}
	$JobTrackerList = New-Object System.Collections.ArrayList
	function Add-JobTracker
	{
			<#
				.SYNOPSIS
					Add a new job to the JobTracker and starts the timer.
			
				.DESCRIPTION
					Add a new job to the JobTracker and starts the timer.
			
				.PARAMETER  Name
					The name to assign to the Job
			
				.PARAMETER  JobScript
					The script block that the Job will be performing. 
					Important: Do not access form controls from this script block.
			
				.PARAMETER ArgumentList
					The arguments to pass to the job
			
				.PARAMETER  CompleteScript
					The script block that will be called when the job is complete.
					The job is passed as an argument. The Job argument is null when the job fails.
			
				.PARAMETER  UpdateScript
					The script block that will be called each time the timer ticks. 
					The job is passed as an argument. Use this to get the Job's progress.
			
				.EXAMPLE
					Job-Begin -Name "JobName" `
					-JobScript {	
						#Important: Do not access form controls from this script block.
						Get-WmiObject Win32_Process -Namespace "root\CIMV2"
					}`
					-CompletedScript {
						Param($Job)		
						$results = Receive-Job -Job $Job		
					}`
					-UpdateScript {
						Param($Job)
						#$results = Receive-Job -Job $Job -Keep
					}
			
				.LINK
					
			#>
		
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[string]$Name,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[ScriptBlock]$JobScript,
			$ArgumentList = $null,
			[ScriptBlock]$CompletedScript,
			[ScriptBlock]$UpdateScript)
		
		#Start the Job
		$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
		
		if ($job -ne $null)
		{
			#Create a Custom Object to keep track of the Job & Script Blocks
			$psObject = New-Object System.Management.Automation.PSObject
			
			Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name Job -Value $job
			Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name CompleteScript -Value $CompletedScript
			Add-Member -InputObject $psObject -MemberType 'NoteProperty' -Name UpdateScript -Value $UpdateScript
			
			[void]$JobTrackerList.Add($psObject)
			
			#Start the Timer
			if (-not $timerJobTracker.Enabled)
			{
				$timerJobTracker.Start()
			}
		}
		elseif ($CompletedScript -ne $null)
		{
			#Failed
			Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
		}
		
	}
	
	function Update-JobTracker
	{
			<#
				.SYNOPSIS
					Checks the status of each job on the list.
			#>
		
		#Poll the jobs for status updates
		$timerJobTracker.Stop() #Freeze the Timer
		
		for ($index = 0; $index -lt $JobTrackerList.Count; $index++)
		{
			$psObject = $JobTrackerList[$index]
			
			if ($psObject -ne $null)
			{
				if ($psObject.Job -ne $null)
				{
					if ($psObject.Job.State -ne "Running")
					{
						#Call the Complete Script Block
						if ($psObject.CompleteScript -ne $null)
						{
							#$results = Receive-Job -Job $psObject.Job
							Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
						}
						
						$JobTrackerList.RemoveAt($index)
						Remove-Job -Job $psObject.Job
						$index-- #Step back so we don't skip a job
					}
					elseif ($psObject.UpdateScript -ne $null)
					{
						#Call the Update Script Block
						Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
					}
				}
			}
			else
			{
				$JobTrackerList.RemoveAt($index)
				$index-- #Step back so we don't skip a job
			}
		}
		
		if ($JobTrackerList.Count -gt 0)
		{
			$timerJobTracker.Start() #Resume the timer	
		}
	}
	function Stop-JobTracker
	{
			<#
				.SYNOPSIS
					Stops and removes all Jobs from the list.
			#>
		#Stop the timer
		$timerJobTracker.Stop()
		
		#Remove all the jobs
		while ($JobTrackerList.Count -gt 0)
		{
			$job = $JobTrackerList[0].Job
			$JobTrackerList.RemoveAt(0)
			Stop-Job $job
			Remove-Job $job
		}
	}#endregion
	
	<#
		.SYNOPSIS
			Creates Active Directory Object picker dialog object.
		
		.DESCRIPTION
			This function creates an active directory object picker dialog box object, which gives the user a GUI to search active directory user objects that mimics the MMC snapin.  When the user selects a user object, function will return the user object's "SAM account Name".
		
		.EXAMPLE
					PS C:\> Search-User
		
		.NOTES
			Additional information about the function.
	#>
	function Search-User
	{
		
		$DialogPicker = New-Object CubicOrange.Windows.Forms.ActiveDirectory.DirectoryObjectPickerDialog
		
		$DialogPicker.AllowedLocations = [CubicOrange.Windows.Forms.ActiveDirectory.Locations]::All
		$DialogPicker.AllowedObjectTypes = [CubicOrange.Windows.Forms.ActiveDirectory.ObjectTypes]::Users
		$DialogPicker.DefaultLocations = [CubicOrange.Windows.Forms.ActiveDirectory.Locations]::JoinedDomain
		$DialogPicker.DefaultObjectTypes = [CubicOrange.Windows.Forms.ActiveDirectory.ObjectTypes]::Users
		$DialogPicker.ShowAdvancedView = $false
		$DialogPicker.MultiSelect = $true
		$DialogPicker.SkipDomainControllerCheck = $true
		$DialogPicker.Providers = [CubicOrange.Windows.Forms.ActiveDirectory.ADsPathsProviders]::Default
		
		$DialogPicker.AttributesToFetch.Add('samAccountName')
		#$DialogPicker.AttributesToFetch.Add('title')
		#$DialogPicker.AttributesToFetch.Add('department')
		#$DialogPicker.AttributesToFetch.Add('distinguishedName')
		
		
		$DialogPicker.ShowDialog()
		
		return $DialogPicker.Selectedobject
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	[string]$scriptname = (Get-Scriptname).TrimEnd('.exe')
	$globaladmin = 'null@null.com'
	$encrps = '76492d1116743f0423413b16050a5345MgB8AFoAawBzAEMAQQA5AFkAMQBoAFAAeQBYADEALwBPAFIAOABBAGgAUgBoAGcAPQA9AHwAZQA5AGQANQAwADkAYQA3ADcAMABjADYAMwAxADIAMwBiADQANABkADYAZABmAGMAYgBhADkAZgAyADMAMAA2AGEAMgA1AGYANABiAGEAOQAzAGMAMAA4ADkAOAAxADEAOQBhADEAZgBmADEAOQBhADcAMAA5ADcAZgA0ADYAMQA='
	
	$key = (3, 4, 2, 3, 56, 34, 254, 222, 1, 1, 2, 23, 42, 54, 33, 233, 1, 34, 2, 7, 6, 5, 35, 43)
	$repusername = "usertoken"
	$reppass = 'ww3hihtbn2ovflnughytuc4ar37sriyp5xftmqpecd2ootiepi2q'
#endregion Source: Globals.ps1

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
NwgAAB+LCAAAAAAABAC9VsmOo0gQvfMVpbm6VewGpOqSwBgwtsFmhxv7lixmh68fu2fUM5qRZqQ+
VOYlIyMzniL08mV8aHHYTHG38v7gvz0Xfd7U33/D39HfPqG3tw+1y9O89oGQg1jxq/jz6ue10HTV
e9snH/C/3K87L/fncjF79HY17tydZQ8qf2D/GBzLW7aITljB3uGOTNzY2rR2mm+lWM6gbW2GPvpJ
vITtJSBHyd0kz8fOu0SyDyZ0bAoD+G0nawZXe7AUEfCUqCDSDDqzCpnIUG6i3c1M2JbxttU5DBff
ok86nHOdh65ljtCOkOBlA/o7VNa8HTC6ugW7S5YBq3LZXYrMsiGgSG3a5iIwqTSd5F6izGBUKlxc
SNxp+KIYIm4TQ3/UnvVCtPY2x9CxzfJG52WZTaXFoE+Gq2HRyQ/PodhG7DIYyeLTh/KkWPQYyqf2
1hBL5tIlZ3vPU6OdU8uewjJgjzIJzZoyp4WqmDt3bVndFdtbgnVUfM1zxWyzCxyXxyXpe3pGs7Zd
WFKiJmZ7xHg15Pq6M5pVAsdWjkYp6qCSITUKPOaNr6VxCecbtt+DdDpTYsB6c+IA5UQcPZiMUR2R
4naTKhUQHpZiuKXRcNZmUgii1LKDbneHiijBHFULLhyc7znl4qrukfLRXlqxQ6DhZLjM3M0pwod5
lHVj5iKvAkhEFpN6Jcj8eNbuAaCtst5uCgrNXaAS/v4YBCKyWYsk01Sw9vbuRZ3iSZ3pceCFet4B
aYp0rlijc4dL6HHWiYU9zd1hyiKpo+SUa4EO1RwaXq2jeqXvPQda+XIOr3sS7+haFx/+XAoD7CT8
oNiUSXtV2gHJM2qYGwVfcBGhPC2ed7Lco9nV3AXyTkFrX5GWl1hadC7nxaTwhUT5gQZEn1XUCK/U
5pKa5WlFZpkVh6ahI4erRjxmWqa8+6ZjJD5iJzDxEGY2/YRvhFCidReIYhcGYq9zRuZmx1OlXPXZ
U7h7QQBNkAU1I+782p4cTWHNgeXJvKkmipqQTlX52YMynzFDc0seQjuHNWntS4xBGvzQgHIcbF4i
ZsyqyG3RUT2wGKsYjG7jGWwKXN/OqzPSla2SODcsCAwUsogUE/TZcYEox9F1zwjkId3T9NXAcIys
tAWQ5pni1t0ipeSp00YbX0Gm2mJ8eBhWFjgKtWaSvcGzI0M6QtqM66nBOdE9yTJoycvJFavoUgMl
Y9NOlvrcsi+Vlhi2QpaJhMUtzLrfpmsjXFrE9xBzUkKZXjsUWm7siB8We09jQ109iYTbUotmrPBU
kA/4h8C8lIbt+7gKQB73L/OvjfWz6sOmA3nw7c36U9OId+Q1v70dRjCMXfy9jseh88G3t9v4DBGe
49Voyrj+HlCUT4bkHmVwIkZo5gP+GfUfIPraD3H1BRDvdl5Hzdy/vzLvvwLw9R18CU7nz3md/goU
gidkQiUoGpGIj/v/C+VU4CsyOjRd/BU4RtbFfvSs3bvh9+UvkeI/K/jT+vG6PuC/NwqfvwMG6fxD
NwgAAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Threading.Tasks, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formRemovedeparteduser = New-Object 'System.Windows.Forms.Form'
	$textbox2 = New-Object 'System.Windows.Forms.TextBox'
	$labelTicketNumber = New-Object 'System.Windows.Forms.Label'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$statusbar1 = New-Object 'System.Windows.Forms.StatusBar'
	$buttonSTART = New-Object 'System.Windows.Forms.Button'
	$button1 = New-Object 'System.Windows.Forms.Button'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$labelUser = New-Object 'System.Windows.Forms.Label'
	$timerJobTracker = New-Object 'System.Windows.Forms.Timer'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	#Event that triggers when the form loads when the script is launched.  Acts as a prerequisite
	#check
	
	
	
	#code which will run when "search" button is clicked to select ad user.
	
	$button1_Click = {
		#calls the search-user function and assigns returned value to variable.
		$text = (Search-User).FetchedAttributes
		#only enables the "start" button (which is initially disabled) if a valid object was returned by the search-user function.
		If (($text -ne '') -and ($text -ne $null))
		{
			$textbox1.Text = $text
		}
		If (($textbox1.Text -ne '') -and ($textbox1.Text -ne $null))
		{
			$buttonSTART.Enabled = $true
		}
		Else
		{
			$buttonSTART.Enabled = $false
		}
	}
	
	
	
	#code which runs when the "start" button is clicked
	$buttonSTART_Click = {
		#log event with syslog server
		Send-SyslogMessage -Server server.acuitylightinggroup.com -Severity Alert -Facility auth -Hostname $env:COMPUTERNAME -ApplicationName Powershell -Transport TCP -FramingMethod Octet-Counting -Port 514 -Message "User: $env:USERDOMAIN\$env:USERNAME App: remove-departeduser Message: `"$env:USERDOMAIN\$env:USERNAME has started the termination procedure for user $($textbox1.Text).`""
		$buttonSTART.Enabled = $false
		$button1.Enabled = $false
		$buttonCancel.Enabled = $true
		$statustext = "Terminating user.  This could take a while...."
		$statusbar1.Text = $statustext
		#if any log file is present, move it to oldlog folder and create new log file
		If (!(Test-Path "$env:APPDATA\termuser"))
		{
			New-Item -Name "termuser" -Path $env:APPDATA -ItemType Directory -Force
		}
		$appfolder = Get-ChildItem "$env:APPDATA\termuser" | Where-Object { $_.Attributes -notlike "Directory" }
		If ($appfolder -ne $null)
		{
			Close-withhandle -Path "$env:APPDATA\termuser" -Download -AcceptEULA -RemoveExecutable -verbose
			foreach ($ollog in $appfolder)
			{
				Move-Item -Path "$($ollog.FullName)" -Destination "$env:APPDATA\termuser\oldlogs\$($ollog.Name)" -Force
			}
		}
		$atext = $textbox1.Text
		$logfile = "termuser.txt"
		Write-Output "Running termination script against $($textbox1.Text)"
		Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tRunning termination script against $($textbox1.Text)" | Out-File "$env:APPDATA\termuser\$logfile" -Force
		Add-JobTracker -Name StartProcess -JobScript {
			param (
				[System.String]$useraccount,
				$ScriptDirp,
				$scriptnamp,
				$globaladmin,
				$encrps,
				$key,
				[Parameter(Mandatory = $false)]
				[AllowEmptyString()]
				$ticketnumber,
				$logfile
			)
			Add-Type -AssemblyName System
			Add-Type -AssemblyName System.IO
			Add-Type -AssemblyName System.Linq
			Add-Type -AssemblyName System.Numerics
			Add-Type -AssemblyName System.Management.Automation
			Add-Type -AssemblyName System.Management
			Add-Type -AssemblyName System.DirectoryServices
			Add-Type -AssemblyName Microsoft.PowerShell.Commands.Management
			Add-Type -AssemblyName Microsoft.PowerShell.Commands.Utility
			#Add-Type -AssemblyName System.Threading.Tasks
			Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
			[reflection.assembly]::Load("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[reflection.assembly]::Load("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[reflection.assembly]::Load("System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
			[reflection.assembly]::Load("System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[reflection.assembly]::Load("System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[reflection.assembly]::Load("System.Collections, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
			[reflection.assembly]::Load("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[reflection.assembly]::Load("System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
			[reflection.assembly]::Load("System.Threading.Tasks, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
			#authenticate to box.  Departmodule also contains the assemblies that make up the
			#box windows sdk and load the assemblies when imported into the powershell session.
			Import-Module DepartModule -Force
			Import-Module "$env:ProgramFiles\SharePoint Online Management Shell\Microsoft.Online.SharePoint.PowerShell\Microsoft.Online.SharePoint.PowerShell.psd1" -Force
			Write-Output "Checking for updated version of the script"
			Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tChecking for updated version of the script" | Out-File $env:APPDATA\termuser\$logfile -Append
			update-thisscript -scriptdirp $ScriptDirp -scriptnamp $scriptnamp
			#Get-ChildItem "$env:ProgramFiles\WindowsPowerShell\Modules\DepartModule\*.dll" -Recurse | % {[System.Reflection.Assembly]::LoadFrom($_.FullName)}
			Write-Output "Accessing Azure Key Vault for Authentication information"
			Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tAccessing Azure Key Vault for Authentication information" | Out-File $env:APPDATA\termuser\$logfile -Append
			$secstt = ConvertTo-SecureString "nothingbutathing" -AsPlainText -Force
			$creds = New-Object System.Management.Automation.PSCredential -ArgumentList "service@null.com", $secstt
			Login-AzureRmAccount -Credential $creds
			$clientid = $null
			$clientsecret = $null
			$passphrase = $null
			$privatekey = $null
			$publickeyid = $null
			$enterpriseid = $null
			$clientid2 = $null
			$clientsecret2 = $null
			$passphrase2 = $null
			$privatekey2 = $null
			$publickeyid2 = $null
			$enterpriseid2 = $null
			$secrets = Get-AzureKeyVaultSecret -VaultName boxauth
			Foreach ($item in $secrets)
			{
				$azkey = Get-AzureKeyVaultSecret -name $item.Name -VaultName $item.VaultName
				If ($azkey.Name -like "clientID")
				{
					$clientid = $azkey.SecretValueText
				}
				ElseIf ($azkey.Name -like "clientSecret")
				{
					$clientsecret = $azkey.SecretValueText
				}
				Elseif ($azkey.Name -like "passphrase")
				{
					$passphrase = $azkey.SecretValueText
				}
				ElseIf ($azkey.Name -like "privateKey")
				{
					$privatekey = $azkey.SecretValueText #.replace("\n","`n").ToString()
				}
				Elseif ($azkey.Name -like "publicKeyID")
				{
					$publickeyid = $azkey.SecretValueText
				}
				Elseif ($azkey.Name -like "enterpriseID")
				{
					$enterpriseid = $azkey.SecretValueText
				}
				If ($azkey.Name -like "clientID2")
				{
					$clientid2 = $azkey.SecretValueText
				}
				ElseIf ($azkey.Name -like "clientSecret2")
				{
					$clientsecret2 = $azkey.SecretValueText
				}
				Elseif ($azkey.Name -like "passphrase2")
				{
					$passphrase2 = $azkey.SecretValueText
				}
				ElseIf ($azkey.Name -like "privateKey2")
				{
					$privatekey2 = $azkey.SecretValueText #.replace("\n","`n").ToString()
				}
				Elseif ($azkey.Name -like "publicKeyID2")
				{
					$publickeyid2 = $azkey.SecretValueText
				}
				Elseif ($azkey.Name -like "enterpriseID2")
				{
					$enterpriseid2 = $azkey.SecretValueText
				}
				Else
				{
				}
			}
			
			$boxconfig = New-Object -TypeName Box.V2.Config.Boxconfig($clientid, $clientSecret, $enterpriseID, $privateKey, $passphrase, $publicKeyID)
			$boxJWT = New-Object -TypeName Box.V2.JWTAuth.BoxJWTAuth($boxconfig)
			$boxjwt
			$tokenreal = $boxJWT.AdminToken()
			$adminclient = $boxjwt.AdminClient($tokenreal, "401268528")
			$adminclient
			
			$boxconfig2 = New-Object -TypeName Box.V2.Config.Boxconfig($clientid2, $clientSecret2, $enterpriseID2, $privateKey2, $passphrase2, $publicKeyID2)
			$boxJWT2 = New-Object -TypeName Box.V2.JWTAuth.BoxJWTAuth($boxconfig2)
			$boxjwt2
			$tokenreal2 = $boxJWT2.AdminToken()
			$adminclient2 = $boxjwt2.AdminClient($tokenreal2, "401268528")
			$adminclient2
			$manager = $null
			$manmail = $null
			$anjob = $null
			$teppas = ConvertTo-SecureString $encrps -Key $key
			$credentials = New-Object System.Management.Automation.PSCredential -ArgumentList $globaladmin, $teppas
			#retrieve information of user returned by search-user function.
			Write-Output "Obtaining information about $useraccount from Active Directory."
			Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tObtaining information about $useraccount from Active Directory." | Out-File $env:APPDATA\termuser\$logfile -Append
			#connects to exchange and disables the terminated user's access to OWA and active sync
			
			#get-pssession | % { If ($_.ConfigurationName -like "Microsoft.Exchange") { Remove-PSSession $_ } }
			#connects to azure and force logs out the terminated user's account from all office 365 services.
			#changes terminated user's password
			$admod = $true
			Try
			{
				Import-Module ActiveDirectory -Force -ErrorAction Stop
			}
			Catch
			{
				$admod = $false
			}
			$user = $null
			#If ($admod -eq $true)
			#{
			$user = Get-ADUser $useraccount -Properties *
			#}
			#Else
			#{
		#		$user = Get-ADSIUser -Identity $useraccount | Select-Object DisplayName,Givenname,name,Enabled,SamAccountName,UserPrincipalName,setpassword,@{Name="mail";Expression={$_.EmailAddress}}
			#}
			If ($user -eq $null)
			{
				Get-Process -Name $scriptnamp | Stop-Process -Force
				Exit
			}
			If ($user.Enabled -eq $false)
			{
				Write-Output "$($user.Displayname) is currently disabled in Active directory.  This will prevent the termination script from successfully processing this user, so the account will be temporarily re-enabled in order to complete the process."
				Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.Displayname) is currently disabled in Active directory.  This will prevent the termination script from successfully processing this user, so the account will be temporarily re-enabled in order to complete the process." | Out-File $env:APPDATA\termuser\$logfile -Append
				#If ($admod -eq $true)
				#{
					Set-ADUser $user -Enabled $true -Confirm:$false
				#}
				#Else
				#{
				#	Enable-ADSIUser -Identity $user.SamAccountName -Confirm:$false
				#}
				$session = New-PSSession -ComputerName "ad-connect-01"
				Invoke-Command -Session $session -ScriptBlock {
					$run = (Get-ADSyncScheduler).SyncCycleInProgress
					If ($run -eq $true)
					{
						Write-host "There is a scheduler already running" -ForegroundColor DarkRed
					}
					Else
					{
						Start-ADSyncSyncCycle -PolicyType Delta
						Start-Sleep 3
						Do
						{
							Start-Sleep 10
							$run = (Get-ADSyncScheduler).SyncCycleInProgress
						}
						Until ($run -eq $false)
						Write-host "Sync is complete." -ForegroundColor DarkGreen
						
					}
				}
				Get-PSSession | Remove-PSSession
			}
			Write-Output "Resetting $($user.DisplayName)'s Active Directory password"
			Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tResetting $($user.DisplayName)'s Active Directory password" | Out-File $env:APPDATA\termuser\$logfile -Append
			#If ($admod -eq $true)
			#{
				Set-ADAccountPassword -Identity $user -Reset -NewPassword (ConvertTo-SecureString -String "nananananananananananananananan" -AsPlainText -Force) -Confirm:$false
		
			Write-Output "Connecting to office 365 admin center"
			Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tConnecting to office 365 admin center" | Out-File $env:APPDATA\termuser\$logfile -Append
			Connect-MsolService -Credential $credentials
			$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $credentials -Authentication Basic -AllowRedirection
			#$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $cred2 -Authentication Basic -AllowRedirection
			Import-PSSession $Session
			Write-Output "In the event that $($user.DisplayName)'s Microsoft online account is configured to block user sign in, this script will temporarily allow the account to sign in order to successfully run the script"
			Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tIn the event that $($user.DisplayName)'s Microsoft online account is configured to block user sign in, this script will temporarily allow the account to sign in order to successfully run the script" | Out-File $env:APPDATA\termuser\$logfile -Append
			Get-MsolUser -UserPrincipalName $user.Userprincipalname | Set-MsolUser -BlockCredential $false
			$litighold = Get-Mailbox -Identity $user.UserPrincipalName
			If ($litighold.LitigationHoldEnabled -eq $true)
			{
				Write-Output "$($user.DisplayName)'s office 365 account is on legal hold."
				Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.DisplayName)'s office 365 account is on legal hold." | Out-File $env:APPDATA\termuser\$logfile -Append
			}
			Else
			{
				Write-Output "$($user.DisplayName)'s office 365 account is NOT on legal hold."
				Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.DisplayName)'s office 365 account is NOT on legal hold." | Out-File $env:APPDATA\termuser\$logfile -Append
			}
			Connect-AzureAD -Credential $credentials
			Write-Output "Revoking $($user.DisplayName)'s access to all office 365 services."
			Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tRevoking $($user.DisplayName)'s access to all office 365 services." | Out-File $env:APPDATA\termuser\$logfile -Append
			Revoke-AzureADUserAllRefreshToken -ObjectId $user.UserPrincipalName
			Write-Output "Disabling Active sync and OWA access for $($user.DisplayName)'s office 365 account."
			Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tDisabling Active sync and OWA access for $($user.DisplayName)'s office 365 account." | Out-File $env:APPDATA\termuser\$logfile -Append
			$output = Get-Mailbox -Identity $user.UserPrincipalName | Set-CASMailbox -ActiveSyncEnabled:$false -OWAforDevicesEnabled:$false
			Write-Output $output
			Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$output" | Out-File $env:APPDATA\termuser\$logfile -Append
			Disconnect-AzureAD
			Get-PSSession | Remove-PSSession
			$email = $user.Mail
			Write-Output "Obtaining information about $useraccount's manager from Active Directory."
			Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tObtaining information about $useraccount's manager from Active Directory." | Out-File $env:APPDATA\termuser\$logfile -Append
			$manager = $null
			#retrieve information of the manager of the user returned by search-user function.
			Try
			{
				$manager = Get-aduser ($user.Manager) -Properties Mail, GivenName, UserPrincipalName, DisplayName -ErrorAction Stop
				$manmail = $manager.Mail
			}
			Catch
			{
				Write-Output "WARNING!!!  $($user.DisplayName)'s Active Directory object does not have a configured manager."
				Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tWARNING!!!  $($user.DisplayName)'s Active Directory object does not have a configured manager." | Out-File $env:APPDATA\termuser\$logfile -Append
			}
			#check to see if terminated user has onedrive files.
			Write-Output "Checking to see if $($user.DisplayName) has Onedrive files."
			Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tChecking to see if $($user.DisplayName) has Onedrive files." | Out-File $env:APPDATA\termuser\$logfile -Append
			Import-Module "$env:ProgramFiles\SharePoint Online Management Shell\Microsoft.Online.SharePoint.PowerShell" -Force
			$departinguser = $user.UserPrincipalName
			$departingUserUnderscore = $departinguser -replace "[^a-zA-Z0-9]", "_"
			Connect-MsolService -Credential $credentials
			$InitialDomain = Get-MsolDomain | Where-Object { $_.IsInitial -eq $true }
			$SharePointAdminURL = "https://$($InitialDomain.Name.Split(".")[0])-admin.sharepoint.com"
			Connect-SPOService -Url $SharePointAdminURL -Credential $credentials
			$useronedrive = $false
			$departingOneDriveSite = "https://$($InitialDomain.Name.Split(".")[0])-my.sharepoint.com/personal/$departingUserUnderscore"
			Try
			{
				Set-SPOUser -Site $departingOneDriveSite -LoginName $globaladmin -IsSiteCollectionAdmin:$true -ErrorAction Stop
				$useronedrive = $true
				Write-Output "$($user.DisplayName) has Onedrive files"
				Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.DisplayName) has Onedrive files" | Out-File $env:APPDATA\termuser\$logfile -Append
			}
			Catch
			{
				$useronedrive = $false
				Write-Output "$($user.DisplayName) does not have Onedrive files"
				Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.DisplayName) does not have Onedrive files" | Out-File $env:APPDATA\termuser\$logfile -Append
			}
			#Obtain a list of all box users, loop through the list, determine's if the user and his/her manager has a box account, and if the user has a box account (identified using user's email), then save the user's and his/her manager's necessary information to variables.
			#$entries = New-Object System.Collections.ArrayList
			If ($manager -eq $null)
			{
				Write-Output "Obtaining box information for $($user.DisplayName)"
				Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tObtaining box information for $($user.DisplayName)" | Out-File $env:APPDATA\termuser\$logfile -Append
			}
			Else
			{
				Write-Output "Obtaining box information for $($user.DisplayName) and $($manager.DisplayName)"
				Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tObtaining box information for $($user.DisplayName) and $($manager.DisplayName)" | Out-File $env:APPDATA\termuser\$logfile -Append
			}
			$val = 0
			$entries = New-Object System.Collections.ArrayList
			$grog = $adminclient.UsersManager.GetEnterpriseUsersAsync($null, 0, 1000)
			$grog.Wait()
			$grog.Result.Entries | % { $entries.Add($_) }
			$tot = $grog.Result.TotalCount
			Do
			{
				$val = $val + 1000
				$temp = $adminclient.UsersManager.GetEnterpriseUsersAsync($null, $val, 1000)
				$temp.Wait()
				$temp.Result.Entries | % { $entries.Add($_) }
				
			}
			while ($val + 1000 -lt $tot)
			
			$id = $null
			$name = $null
			$login = $null
			$manid = $null
			$manlogin = $null
			Foreach ($entry in $entries)
			{
				If ($entry.login -like $email)
				{
					Write-Output "$($user.DisplayName) has a box account.  Scan will continue.  Please wait."
					Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.DisplayName) has a box account.  Scan will continue.  Please wait." | Out-File $env:APPDATA\termuser\$logfile -Append
					$id = $entry.Id
					$login = $entry.login
					$name = $entry.Name
				}
				If (($manager -ne $null) -and ($manager -ne ''))
				{
					If ($entry.login -like $manager.Mail)
					{
						$manid = $entry.Id
						$manlogin = $entry.login
						Write-Output "$($manager.DisplayName) has a box account.  Scan will continue.  Please wait."
						Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($manager.DisplayName) has a box account.  Scan will continue.  Please wait." | Out-File $env:APPDATA\termuser\$logfile -Append
					}
				}
			}
			#The below code runs if the user has a box account
			
			If ($id -eq $null)
			{
				Write-Output "$($user.displayName) does not have a box account."
				Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.displayName) does not have a box account." | Out-File $env:APPDATA\termuser\$logfile -Append
			}
			Else
			{
				Write-Output "$($user.displayName)'s box account id is $id."
				Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.displayName)'s box account id is $id." | Out-File $env:APPDATA\termuser\$logfile -Append
			}
			If ($manid -eq $null)
			{
				Write-Output "$($manager.DisplayName) does not have a box account."
				Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($manager.DisplayName) does not have a box account." | Out-File $env:APPDATA\termuser\$logfile -Append
			}
			Else
			{
				Write-Output "$($manager.DisplayName)'s box account id is $manid."
				Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($manager.DisplayName)'s box account id is $manid." | Out-File $env:APPDATA\termuser\$logfile -Append
			}
			
			If ($id -ne $null)
			{
				#this block runs if the user has onedrive files in addition to a box account.  In short, this block will scan all of the items in the terminated user's onedrive, then
				#re-create the directory structure of the terminated user's onedrive in a newly created folder in the terminated user's box account, and then, file by file, will download
				#the file from the terminated user's onedrive to the local machine (in a folder called "onedrivefiles" in user's temp directory) and then upload the downloaded file to
				#correct folder in the terminated user's box account.
				If ($useronedrive -eq $true)
				{
					
					Write-Output "Copying $($user.Displayname)'s onedrive files to box."
					Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tCopying $($user.Displayname)'s onedrive files to box." | Out-File $env:APPDATA\termuser\$logfile -Append
					#$boxconfig = New-Object -TypeName Box.V2.Config.Boxconfig($clientid, $clientSecret, $enterpriseID, $privateKey, $passphrase, $publicKeyID)
					#$boxJWT = New-Object -TypeName Box.V2.JWTAuth.BoxJWTAuth($boxconfig)
					#$boxjwt
					$tokenreal = $boxJWT.AdminToken()
					$adminclient = $boxjwt.AdminClient($tokenreal, "$id")
					$adminclient
					
					#$boxconfig2 = New-Object -TypeName Box.V2.Config.Boxconfig($clientid2, $clientSecret2, $enterpriseID2, $privateKey2, $passphrase2, $publicKeyID2)
					#$boxJWT2 = New-Object -TypeName Box.V2.JWTAuth.BoxJWTAuth($boxconfig2)
					#$boxjwt2
					$tokenreal2 = $boxJWT2.AdminToken()
					$adminclient2 = $boxjwt2.AdminClient($tokenreal2, "$id")
					$adminclient2
					
					$curfoldi = $adminclient.FoldersManager.GetFolderItemsAsync("0", 1000, 0)
					$curfoldi.Wait()
					foreach ($curfoli in $curfoldi.Result.entries)
					{
						If ($curfoli.Name -like "$departinguser's onedrive files")
						{
							$thedelete = $adminclient.FoldersManager.DeleteAsync($curfoli.id, $true)
							$thedelete.Wait()
						}
					}
					
					Write-Output "Connecting to user's onedrive account"
					Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tConnecting to user's onedrive account" | Out-File $env:APPDATA\termuser\$logfile -Append
					Connect-MsolService -Credential $credentials
					
					$InitialDomain = Get-MsolDomain | Where-Object { $_.IsInitial -eq $true }
					
					$SharePointAdminURL = "https://$($InitialDomain.Name.Split(".")[0])-admin.sharepoint.com"
					
					$departingUserUnderscore = $user.UserPrincipalName -replace "[^a-zA-Z0-9]", "_"
					
					$departingOneDriveSite = "https://$($InitialDomain.Name.Split(".")[0])-my.sharepoint.com/personal/$departingUserUnderscore"
					Write-Host "`nConnecting to SharePoint Online" -ForegroundColor Blue
					Connect-SPOService -Url $SharePointAdminURL -Credential $credentials
					
					Write-Host "`nAdding $globaladmin as site collection admin on both OneDrive site collections" -ForegroundColor Blue
					# Set current admin as a Site Collection Admin on both OneDrive Site Collections
					Set-SPOUser -Site $departingOneDriveSite -LoginName $globaladmin -IsSiteCollectionAdmin:$true
					
					Write-Host "`nConnecting to $($user.DisplayName)'s OneDrive via SharePoint Online PNP module" -ForegroundColor Blue
					
					Connect-PnPOnline -Url $departingOneDriveSite -Credentials $credentials
					
					Write-Host "`nGetting display name of $departinguser" -ForegroundColor Blue
					# Get name of departing user to create folder name.
					$departingOwner = Get-PnPSiteCollectionAdmin | Where-Object { $_.loginname -match $departinguser }
					
					# If there's an issue retrieving the departing user's display name, set this one.
					if ($departingOwner -contains $null)
					{
						$departingOwner = @{
							Title    = "Departing User"
						}
					}
					
					# Define relative folder locations for OneDrive source and destination
					$departingOneDrivePath = "/personal/$departingUserUnderscore/Documents"
					$destinationOneDriveSiteRelativePath = "Documents/$($departingOwner.Title)'s Files"
					
					Write-Host "`nGetting all items from $($departingOwner.Title)" -ForegroundColor Blue
					# Obtain a list of all items in terminated user's OneDrive
					$items = Get-PnPListItem -List Documents -PageSize 1000
					#define directory on local machine which onedrive files will be temporarily
					#saved to before uploading them to terminated user's box account
					$localbase = "$env:TEMP\onedrivefiles"
					If (!(Test-path $localbase))
					{
						New-item $localbase -ItemType Directory -Force
					}
					#create root folder in terminated user's box account which will hold terminated user's
					#onedrive files
					Write-Output "Creating root folder"
					Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tCreating root folder." | Out-File $env:APPDATA\termuser\$logfile -Append
					$createfolreq = @{
						name	 = "$departinguser's onedrive files"
						parent   = @{
							id	   = "0"
						}
					}
					$createboxfol = $adminclient.FoldersManager.CreateAsync($createfolreq)
					$createboxfol.Wait()
					$boxrootfolid = $createboxfol.Result.Id
					$errorarray = New-Object System.Collections.ArrayList
					$follist = New-object System.Collections.ArrayList
					#loops through all objects in terminated user's onedrive
					foreach ($item in $items)
					{
						$rel = $null
						#checks to see the tyoe of the current object in the list of objects 
						#in the terminated user's Onedrive (file or directory).  Below block
						#executes if the object is a directory
						If ($item.Fieldvalues.FSObjType -eq 1)
						{
							#creates a custom powershell object and assigns all important
							#information concerning the directory to properties of the object
							#and adds the custom object to an array.
							$createfolreq = $null
							$haserror = $false
							$tempidd = $null
							$psob = New-Object -TypeName PSObject
							$psob | Add-Member -MemberType NoteProperty -Name "FullPath" -Value $item.FieldValues.FileRef
							$psob | Add-member -MemberType NoteProperty -Name "ParentPath" -Value $item.FieldValues.FileDirRef
							$psob | Add-member -MemberType NoteProperty -Name "FileName" -Value $item.FieldValues.FileLeafRef
							#checks to see if the directory is located in the terminated user's root
							#Onedrive directory.  If it is, creates a folder with the same name in 
							#the root of the recently created folder meant to house terminated user's
							#one drive content in the terminated user's box account. 
							If ($item.FieldValues.FileDirRef -eq $departingOneDrivePath)
							{
								$createfolreq = @{
									name	 = "$($item.FieldValues.FileLeafRef)"
									parent   = @{
										id	   = "$boxrootfolid"
									}
								}
							}
							#if the directory is not located in the root of the terminated user's
							#onedrive, it loops through all of the folders that have been created
							#in the terminated user's box account and looks for an object in the array
							#whose full path is equal to the full path of the parent directory of the 
							#current onedrive object being processed in the loop (to determine the id 
							#of the folder's parent so current object can be correctly placed)
							Else
							{
								
								Foreach ($folderr in $follist)
								{
									If ($folderr.fullpath -eq $item.FieldValues.FileDirRef)
									{
										$tempidd = $folderr.Id
										Break
									}
								}
								If ($tempidd -eq $null)
								{
									$haserror = $true
								}
								$createfolreq = @{
									name   = "$($item.FieldValues.FileLeafRef)"
									parent = @{
										id	   = "$tempidd"
									}
								}
							}
							If ($haserror -eq $true)
							{
								$errorarray.Add($item)
								Continue
							}
							Else
							{
								#creates the new folder in the terminated user's box account, preserving 
								#the directory structure.
								Write-Output "Creating directories in $departinguser's onedrive"
								Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tCreating directories in $departinguser's onedrive" | Out-File $env:APPDATA\termuser\$logfile -Append
								$foldproc = $adminclient.FoldersManager.CreateAsync($createfolreq)
								$foldproc.Wait()
								$theid = $null
								$theid = $foldproc.Result.Id
								$psob | Add-Member -MemberType NoteProperty -Name "Id" -Value $theid
								$follist.Add($psob)
							}
						}
					}
					If ($errorarray.Count -gt 0)
					{
						Do
						{
							$tempstore = New-Object System.Collections.ArrayList
							foreach ($item in $errorarray)
							{
								$rel = $null
								#checks to see the tyoe of the current object in the list of objects 
								#in the terminated user's Onedrive (file or directory).  Below block
								#executes if the object is a directory
								If ($item.Fieldvalues.FSObjType -eq 1)
								{
									#creates a custom powershell object and assigns all important
									#information concerning the directory to properties of the object
									#and adds the custom object to an array.
									$createfolreq = $null
									$tempidd = $null
									$haserror = $false
									$psob = New-Object -TypeName PSObject
									$psob | Add-Member -MemberType NoteProperty -Name "FullPath" -Value $item.FieldValues.FileRef
									$psob | Add-member -MemberType NoteProperty -Name "ParentPath" -Value $item.FieldValues.FileDirRef
									$psob | Add-member -MemberType NoteProperty -Name "FileName" -Value $item.FieldValues.FileLeafRef
									#checks to see if the directory is located in the terminated user's root
									#Onedrive directory.  If it is, creates a folder with the same name in 
									#the root of the recently created folder meant to house terminated user's
									#one drive content in the terminated user's box account. 
									If ($item.FieldValues.FileDirRef -eq $departingOneDrivePath)
									{
										$createfolreq = @{
											name   = "$($item.FieldValues.FileLeafRef)"
											parent = @{
												id	   = "$boxrootfolid"
											}
										}
									}
									#if the directory is not located in the root of the terminated user's
									#onedrive, it loops through all of the folders that have been created
									#in the terminated user's box account and looks for an object in the array
									#whose full path is equal to the full path of the parent directory of the 
									#current onedrive object being processed in the loop (to determine the id 
									#of the folder's parent so current object can be correctly placed)
									Else
									{
										
										Foreach ($folderr in $follist)
										{
											If ($folderr.fullpath -eq $item.FieldValues.FileDirRef)
											{
												$tempidd = $folderr.Id
												Break
											}
										}
										If ($tempidd -eq $null)
										{
											$haserror = $true
										}
										$createfolreq = @{
											name    = "$($item.FieldValues.FileLeafRef)"
											parent  = @{
												id	   = "$tempidd"
											}
										}
									}
									If ($haserror -eq $true)
									{
										$tempstore.Add($item)
										Continue
									}
									Else
									{
										#creates the new folder in the terminated user's box account, preserving 
										#the directory structure.
										Write-Output "Creating directories in $departinguser's onedrive"
										Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tCreating directories in $departinguser's onedrive" | Out-File $env:APPDATA\termuser\$logfile -Append
										$foldproc = $adminclient.FoldersManager.CreateAsync($createfolreq)
										$foldproc.Wait()
										$theid = $null
										$theid = $foldproc.Result.Id
										$psob | Add-Member -MemberType NoteProperty -Name "Id" -Value $theid
										$follist.Add($psob)
									}
								}
							}
							$errorarray = $tempstore
						}
						Until ($errorarray.Count -eq 0)
					}
					#below code executes when the onedrive object currently being processed in the
					#list is a file.
					foreach ($item in $items)
					{
						$rel = $null
						If ($item.Fieldvalues.FSObjType -eq 0)
						{
							#downloads the file to local machine
							Try
							{
								Get-PnPFile -Url $item.FieldValues.FileRef -Path $localbase -Filename $item.FieldValues.FileLeafRef -AsFile -force -ErrorAction Stop
								Write-Output "$($item.FieldValues.FileRef) downloaded successfully."
								Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($item.FieldValues.FileRef) downloaded successfully." | Out-File $env:APPDATA\termuser\$logfile -Append
								Start-Sleep 3
							}
							Catch
							{
								Write-Output "$($item.FieldValues.FileRef) did not download successfully.  You will either have to re-run the script or obtain the file manually."
								Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($item.FieldValues.FileRef) did not download successfully.  You will either have to re-run the script or obtain the file manually." | Out-File $logpath -Append
								Continue
							}
							#determines the id of the directory the file should be stored in in the
							#terminated user's box account by comparing the parent directory of the
							#current onedrive object to the full paths of the directories saved to
							#an array
							$tempidd = $null
							If ($item.FieldValues.FileDirRef -eq $departingOneDrivePath)
							{
								$request = @{
									name    = "$($item.FieldValues.FileLeafRef)"
									parent  = @{
										id	   = "$boxrootfolid"
									}
								}
							}
							Else
							{
								Foreach ($folderr in $follist)
								{
									If ($folderr.fullpath -eq $item.FieldValues.FileDirRef)
									{
										$tempidd = $folderr.Id
										Break
									}
								}
								
								$request = @{
									name    = "$($item.FieldValues.FileLeafRef)"
									parent  = @{
										id	   = "$tempidd"
									}
								}
							}
							
								#upload the file to the appropriate folder in the terminated user's box account
								Do
								{
									$timespan = New-Object System.TimeSpan -ArgumentList 0, 15, 0
									$localfile = $null
									$localfile = [System.IO.File]::OpenRead("$localbase\$($item.FieldValues.FileLeafRef)")
									$uploadbox = $adminclient.FilesManager.UploadAsync($request, $localfile, $null, $timespan)
									$uploadbox.Wait()
									$uploadbox.Result
								}
								Until ($uploadbox.Status -like "RanToCompletion")
							<#
							If ($localfile -eq $null)
							{
								Write-Output "$($item.FieldValues.FileRef) did not upload to box successfully.  This usually happens with very large files and the attempted upload simply timed out."
								Write-Output "$($item.FieldValues.FileRef) did not upload to box successfully.  This usually happens with very large files and the attempted upload simply timed out." | Out-File $env:APPDATA\termuser\$logfile -Append
								Remove-Item "$localbase\$($item.FieldValues.FileLeafRef)" -Force
								Continue
							}
							Else
							{
							#>							
								If ($uploadbox.status -like "Faulted")
								{
									Write-Output "$thedate`t$($item.FieldValues.FileRef) did not upload to box successfully.  This usually happens with very large files and the attempted upload simply timed out."
								Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($item.FieldValues.FileRef) did not upload to box successfully.  This usually happens with very large files and the attempted upload simply timed out." | Out-File $env:APPDATA\termuser\$logfile -Append
								}
								Else
								{
									Write-Output "$($item.FieldValues.FileRef) uploaded to box successfully"
								Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($item.FieldValues.FileRef) uploaded to box successfully" | Out-File $env:APPDATA\termuser\$logfile -Append
								}
								#delete file on local machine after it has processed.
								Remove-Item "$localbase\$($item.FieldValues.FileLeafRef)" -Force
						}
					}
					Write-Output "All onedrive files have been processed."
					Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tAll onedrive files have been processed." | Out-File $env:APPDATA\termuser\$logfile -Append
					#$boxconfig = New-Object -TypeName Box.V2.Config.Boxconfig($clientid, $clientSecret, $enterpriseID, $privateKey, $passphrase, $publicKeyID)
					#$boxJWT = New-Object -TypeName Box.V2.JWTAuth.BoxJWTAuth($boxconfig)
					#$boxjwt
					
				}
				$tokenreal = $boxJWT.AdminToken()
				$adminclient = $boxjwt.AdminClient($tokenreal, "401268528")
				$adminclient
				
				#$boxconfig2 = New-Object -TypeName Box.V2.Config.Boxconfig($clientid2, $clientSecret2, $enterpriseID2, $privateKey2, $passphrase2, $publicKeyID2)
				#$boxJWT2 = New-Object -TypeName Box.V2.JWTAuth.BoxJWTAuth($boxconfig2)
				#$boxjwt2
				$tokenreal2 = $boxJWT2.AdminToken()
				$adminclient2 = $boxjwt2.AdminClient($tokenreal2, "401268528")
				$adminclient2
				#The below code will determine if the user is on litigation hold in office 365. If the user is not on litigation hold in office 365, the
				#script will determine if the user is on legal hold in box.
				Write-Output "Checking to see if $($user.DisplayName) is on legal hold."
				Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tChecking to see if $($user.DisplayName) is on legal hold." | Out-File $env:APPDATA\termuser\$logfile -Append
				$holdtext = ''
				$onlegalhold = $false
				#if user is not on legal hold in office 365, then see if the user is on legal hold
				#in box.
				If ($litighold.LitigationHoldEnabled -eq $true)
				{
					Write-Output "$($user.DisplayName) is on litigation hold in office 365."
					Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.DisplayName) is on litigation hold in office 365." | Out-File $env:APPDATA\termuser\$logfile -Append
				}
				Else
				{
					#The below code will obtain a list of all legal hold assignments for all legal hold objects to determine if the user is on legal hold.
					$leghols = $adminclient2.LegalHoldPoliciesManager.GetListLegalHoldPoliciesAsync($null, $null, 1000)
					$leghols.Wait()
					foreach ($leghol in $leghols.Result.entries)
					{
						$moreleg = $adminclient2.LegalHoldPoliciesManager.GetAssignmentsAsync($leghol.id, $null, $null, $null, 1000)
						$moreleg.Wait()
						foreach ($moremo in $moreleg.Result.entries)
						{
							$newoutput = $adminclient2.LegalHoldPoliciesManager.GetAssignmentAsync($moremo.id)
							$newoutput.Wait()
							If ($newoutput.Result.Assignedto.Id -like $id)
							{
								Write-Output "$($user.DisplayName) is on legal hold in box."
								Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.DisplayName) is on legal hold in box." | Out-File $env:APPDATA\termuser\$logfile -Append
								$onlegalhold = $true
								Break
							}
						}
						If ($onlegalhold -eq $true)
						{
							Break
						}
					}
				}
				#Below code runs if the user is on legal hold, and checks for the legal hold in o365 and/or box.
				If (($onlegalhold -eq $true) -or ($litighold.LitigationHoldEnabled -eq $true))
				{
					Write-Output "$($user.DisplayName) is on legal hold.  Moving files to legal hold folder.  Please wait."
					Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.DisplayName) is on legal hold.  Moving files to legal hold folder.  Please wait." | Out-File $env:APPDATA\termuser\$logfile -Append
					#Moves all of the user's box content to the legal hold folder in the Main Box Administrator's Box account.
					$tokenreal = $boxJWT.AdminToken()
					$adminclient = $boxjwt.AdminClient($tokenreal, "401268528")
					$adminclient
					
					#$boxconfig2 = New-Object -TypeName Box.V2.Config.Boxconfig($clientid2, $clientSecret2, $enterpriseID2, $privateKey2, $passphrase2, $publicKeyID2)
					#$boxJWT2 = New-Object -TypeName Box.V2.JWTAuth.BoxJWTAuth($boxconfig2)
					#$boxjwt2
					$tokenreal2 = $boxJWT2.AdminToken()
					$adminclient2 = $boxjwt2.AdminClient($tokenreal2, "401268528")
					$adminclient2
					$foldproc = $adminclient.UsersManager.MoveUserFolderAsync("$id", "401268528", "0", $false)
					$foldproc.Wait()
					$foldproc.Result
					$findfold = $adminclient.FoldersManager.GetFolderItemsAsync("0", 1000, 0)
					$findfold.Wait()
					foreach ($thing in $findfold.Result.entries)
					{
						If ($thing.Name -like "$login*")
						{
							$folentreq = New-Object Box.V2.Models.BoxRequestEntity
							$folentreq.Id = "22707076963"
							$movefolreq = New-Object Box.V2.Models.BoxFolderRequest
							$movefolreq.Id = $thing.Id
							$movefolreq.Parent = $folentreq
							$themove = $adminclient.FoldersManager.UpdateInformationAsync($movefolreq)
							$themove.Wait()
							$themove.Result
							Break
						}
					}
					#Constructs and send email to employees in the legal department informing them that they now have access to the user's files.
					$body = "To whom this may concern,<br />The box files for $name, which have been placed on legal hold, are now available for you to access in the `"legal hold`" box folder.  If you have any questions, submit a ticket in cherwell.<br />Box Administrator"
					#$body = "Ben,`r`nThis is a test run of the user termination script.  If you are seeing this email, it is because ltest, the test account that was created to test this script, is on legal hold.  So, if you login to box right now and look in the `"legal hold`" folder, you will see ltest's files in the folder.  I was also thinking of sending notification emails like this one to whoever the box files get transferred to (eg send an email to Carrie and Anne if the user is on legal hold or to the user's manager if the user is not).  Let me (William) know what you think.`r`nBox Administrator"
					Send-boxemail -toAddress "Lawyer.Lady@AcuityBrands.com" -subject "$name's Box files" -body $body
					$holdtext = "Box files for $name moved to legal hold folder, $name's box account has been deleted, disabled $name's Active Directory account, and moved the Active Directory account to the terminated Organizational Unit."
					Write-Output "Box files in $name's box account have been moved to the legal hold folder."
					Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tBox files in $name's box account have been moved to the legal hold folder." | Out-File $env:APPDATA\termuser\$logfile -Append
				}
				
				#Below Code runs if the terminated user is not on legal hold
				Else
				{
					#if user is not on legal hold, the actions that are performed with the user's box/onedrive
					#content depends on numerous factory, including if the terminated user had an
					#manager configured in their ad account, and if the terminated user's manager
					#(if present) has a box account
					Write-Output "$($user.DisplayName) is not on legal hold."
					Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.DisplayName) is not on legal hold." | Out-File $env:APPDATA\termuser\$logfile -Append
					#Below Code runs if the terminated user's manager is either not configured
					#in the terminated user's ad account, or the manager does not have a box
					#account.
					If ($manid -eq $null)
					{
						#in either of the above scenarios, the terminated user's box/onedrive files
						#would be moved to the root of main box admin account.
						Write-Output "Moving $name's files to the root of the main admin account."
						Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tMoving $name's files to the root of the main admin account." | Out-File $env:APPDATA\termuser\$logfile -Append
						$foldproc = $adminclient.UsersManager.MoveUserFolderAsync("$id", "401268528", "0", $false)
						$foldproc.Wait()
						#Below block runs if the terminated user's manager was configured in their
						#ad account, but the manager does not have a box account.
						If ($manmail -ne $null)
						{
							#A shared link to the terminated user's box files will be emailed to manager.
							Write-Output "$($user.DisplayName) has a manager configured in Active Directory, but that manager does not appear to have a box account.  Creating shared link to box content and sending to manager."
							Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.DisplayName) has a manager configured in Active Directory, but that manager does not appear to have a box account.  Creating shared link to box content and sending to manager." | Out-File $env:APPDATA\termuser\$logfile -Append
							$foldid = $null
							#Searches all of the folders in the Main Box Administrator's Box account for the folder which was just created containing the terminated user's files.
							$folddd = $adminclient.FoldersManager.GetFolderItemsAsync("0", 1000, 0)
							$folddd.Wait()
							$foldentries = $folddd.result.entries
							foreach ($foldentry in $foldentries)
							{
								If ($foldentry.name -like "*$login*")
								{
									$foldid = $foldentry.id
									Break
								}
								Else
								{
									Continue
								}
							}
							#creates the shared link to the folder containing the terminated user's box files.
							$sharejson = [Box.V2.Models.BoxSharedLinkRequest]::new()
							$sharejson.Access = "open"
							$sharelink = $adminclient.FoldersManager.CreateSharedLinkAsync($foldid, $sharejson)
							#$sharelink = box shared-links create $foldid folder --as-user 401268528 --can-download --json | Convertfrom-json
							$sharelink.Wait()
							$link = $sharelink.Result.SharedLink.Url
							$deldate = (Get-Date).AddDays(7)
							#generates and sends the terminated user's manager an email containing the share link.
							$body = "$($manager.GivenName),<br />This is an email to inform you that $name's box files are available for you to access.  However, it appears that you do not have a box account, but you can still access and download $name's files using the below url.  However, please download these files as soon as you are able, as the files will be deleted on $($deldate.DateTime).<br />$link<br />Box Administrator"
							Send-boxemail -toAddress $manager.Mail -subject "$name's box files" -body $body
							$holdtext = "Box files for $name moved to root folder of main admin account, a shared link was shared with $name's manager, $name's box account has been deleted, and $name's Active Directory account has been disabled and moved to the terminated Organizational Unit."
						}
						#below block executes if the terminated user's ad account did not have a configured manager.
						Else
						{
							$holdtext = "Box files for $name moved to root folder of main admin account, $name's box account has been deleted, and $name's Active Directory account has been disabled and moved to the terminated Organizational Unit.  $user did not have a manager configured in AD."
							Write-Output "$user did not have a manager configured in AD, so files will remain in the main admin account." | Out-File $env:APPDATA\termuser\$logfile -Append
							Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$user did not have a manager configured in AD, so files will remain in the main admin account."
						}
					}
					#Below Code runs if the user's manager does have a box account.  User's files will be moved to manager's box account.
					Else
					{
						Write-Output "Moving $name's files to manager's box account and sending email to manager to inform them of new file content."
						Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tMoving $name's files to manager's box account and sending email to manager to inform them of new file content." | Out-File $env:APPDATA\termuser\$logfile -Append
						#move all files from terminated user's box account to manager's box account
						
						#$boxconfig = New-Object -TypeName Box.V2.Config.Boxconfig($clientid, $clientSecret, $enterpriseID, $privateKey, $passphrase, $publicKeyID)
						#$boxJWT = New-Object -TypeName Box.V2.JWTAuth.BoxJWTAuth($boxconfig)
						#$boxjwt
						#$tokenreal = $boxJWT.AdminToken()
						#$adminclient = $boxjwt.AdminClient($tokenreal, "$manid")
						#$adminclient
						
						#$boxconfig2 = New-Object -TypeName Box.V2.Config.Boxconfig($clientid2, $clientSecret2, $enterpriseID2, $privateKey2, $passphrase2, $publicKeyID2)
						#$boxJWT2 = New-Object -TypeName Box.V2.JWTAuth.BoxJWTAuth($boxconfig2)
						#$boxjwt2
						#$tokenreal2 = $boxJWT2.AdminToken()
						#$adminclient2 = $boxjwt2.AdminClient($tokenreal2, "$manid")
						#$adminclient2
						$foldproc = $adminclient.UsersManager.MoveUserFolderAsync("$id", "$manid", "0", $false)
						$foldproc.Wait()
						If ($foldproc.Status -like "Faulted")
						{
							Write-Output $foldproc.Exception.InnerExceptions
							Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($foldproc.Exception.InnerExceptions)" | Out-File $env:APPDATA\termuser\$logfile -Append
						}
						
						$tokenreal = $boxJWT.AdminToken()
						$adminclient = $boxjwt.AdminClient($tokenreal, "$manid")
						$adminclient
						
						$tokenreal2 = $boxJWT2.AdminToken()
						$adminclient2 = $boxjwt2.AdminClient($tokenreal2, "$manid")
						$adminclient2
						$foldid = $null
						#Searches all of the folders in the terminated user's manager's Box account for the folder which was just created containing the terminated user's files.
						$folddd = $adminclient.FoldersManager.GetFolderItemsAsync("0", 1000, 0)
						$folddd.Wait()
						If ($folddd.Status -like "Faulted")
						{
							Write-Output $folddd.Exception.InnerExceptions
							Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($folddd.Exception.InnerExceptions)" | Out-File $env:APPDATA\termuser\$logfile -Append
						}
						
						$foldentries = $folddd.result.entries
						If ($folddd.result.TotalCount -le 1000)
						{
							foreach ($foldentry in $foldentries)
							{
								If ($foldentry.name -like "*$login*")
								{
									$foldid = $foldentry.id
									Break
								}
								Else
								{
									Continue
								}
							}
						}
						Else
						{
							$offset = 1000
							$foldarrray = New-Object System.Collections.ArrayList
							foreach ($foldentry in $foldentries)
							{
								$foldarrray.Add($foldentry)
							}
							Do
							{
								$folddd = $adminclient.FoldersManager.GetFolderItemsAsync("0", 1000, $offset)
								$folddd.Wait()
								$foldentries = $folddd.result.entries
								foreach ($foldentry in $foldentries)
								{
									$foldarrray.Add($foldentry)
								}
								$offset = $offset + 1000
							}
							Until ($offset -gt $folddd.result.TotalCount)
							foreach ($anfoldentry in $foldarrray)
							{
								If ($anfoldentry.name -like "*$login*")
								{
									$foldid = $anfoldentry.id
									Break
								}
								Else
								{
									Continue
								}
							}
						}
						Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$foldid" | Out-File $env:APPDATA\termuser\$logfile -Append
						#once the folder containing the terminated user's files is found, allow the folder to sync to box sync.
						$foldoptio = New-Object Box.V2.Models.BoxFolderRequest
						$foldoptio.Id = $foldid
						$foldoptio.SyncState = "synced"
						$of = $adminclient.FoldersManager.UpdateInformationAsync($foldoptio)
						$of.Wait()
						$of.Result
						#send email to terminated user's manager letting them know the terminated user's files are now available to be accessed.
						$body = "$($manager.GivenName),<br />This email is to notify you that $name's box files have been transfered into your box account.  Please login to your box account (or check your box sync folder if you have box sync installed on your machine) to view the files at your earliest convenience.  THank you.<br />Box Administrator"
						Send-boxemail -toAddress $manager.Mail -subject "$name's box files" -body $body
						$holdtext = "Box files for $name moved to manager's box folder, deleted $name's box account, and disabled $name's Active Directory account and moved it to the terminated Organizational Unit."
						#$boxconfig = New-Object -TypeName Box.V2.Config.Boxconfig($clientid, $clientSecret, $enterpriseID, $privateKey, $passphrase, $publicKeyID)
						#$boxJWT = New-Object -TypeName Box.V2.JWTAuth.BoxJWTAuth($boxconfig)
						#$boxjwt
						$tokenreal = $boxJWT.AdminToken()
						$adminclient = $boxjwt.AdminClient($tokenreal, "401268528")
						$adminclient
						
						#$boxconfig2 = New-Object -TypeName Box.V2.Config.Boxconfig($clientid2, $clientSecret2, $enterpriseID2, $privateKey2, $passphrase2, $publicKeyID2)
						#$boxJWT2 = New-Object -TypeName Box.V2.JWTAuth.BoxJWTAuth($boxconfig2)
						#$boxjwt2
						$tokenreal2 = $boxJWT2.AdminToken()
						$adminclient2 = $boxjwt2.AdminClient($tokenreal2, "401268528")
						$adminclient2
					}
				}
				
				#Deletes terminated user's now empty box account and recovers license.
				Write-Output "Deleting $($user.DisplayName)'s box account"
				Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tDeleting $($user.DisplayName)'s box account" | Out-File $env:APPDATA\termuser\$logfile -Append
				$deleteuser = $adminclient.UsersManager.DeleteEnterpriseUserAsync("$id", $false, $true)
				$deleteuser.Wait()
			}
			#Below code runs if the user returned by the Search-user function does not have a box account.
			Else
			{
				Write-Output "$($user.DisplayName) does not have a box account."
				Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.DisplayName) does not have a box account." | Out-File $env:APPDATA\termuser\$logfile -Append
				#this block runs if the terminated user has onedrive files
				If ($useronedrive -eq $true)
				{
					Write-Output "$($user.DisplayName) does have a onedrive account."
					Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.DisplayName) does have a onedrive account." | Out-File $env:APPDATA\termuser\$logfile -Append
					#the below code will create different entries in the log file depending on if the terminated user is on legal hold, or, if the terminated user is not on legal hold, if the manager has a box account.
					#below block runs if the terminated user is on legal hold in office 365.
					If ($litighold.LitigationHoldEnabled -eq $true)
					{
						Write-Output "$($user.DisplayName) is on litigation hold.  Moving files to legal hold folder."
						Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.DisplayName) is on litigation hold.  Moving files to legal hold folder." | Out-File $env:APPDATA\termuser\$logfile -Append
					}
					#below block runs if the terminated user is not on legal hold
					Else
					{
						#below block runs if terminated user's manager has a box account
						If ($manid -ne $null)
						{
							Write-Output "$($user.DisplayName)'s manager has a box account.  Onedrive files will be uploaded to manager's box account."
							Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.DisplayName)'s manager has a box account.  Onedrive files will be uploaded to manager's box account." | Out-File $env:APPDATA\termuser\$logfile -Append
						}
						#below block runs if terminated user's manager does not have a box account
						Else
						{
							Write-Output "$($user.DisplayName)'s manager does not have a box account, but is configured in Active Directory.  Onedrive files will be uploaded to the main admin box account and a share link will be generated and sent to manager."
							Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.DisplayName)'s manager does not have a box account, but is configured in Active Directory.  Onedrive files will be uploaded to the main admin box account and a share link will be generated and sent to manager." | Out-File $env:APPDATA\termuser\$logfile -Append
						}
					}
					
					#$boxconfig = New-Object -TypeName Box.V2.Config.Boxconfig($clientid, $clientSecret, $enterpriseID, $privateKey, $passphrase, $publicKeyID)
					#$boxJWT = New-Object -TypeName Box.V2.JWTAuth.BoxJWTAuth($boxconfig)
					#$boxjwt
					$tokenreal = $boxJWT.AdminToken()
					$tokenreal2 = $boxJWT2.AdminToken()
					#authenticates to box under the context of the main admin account if terminated user is on legal hold or if the terminated user's manager does not have a box account.  Sets the "destination account" as the main box admin account.
					If (($litighold.LitigationHoldEnabled -eq $true) -or ($manid -eq $null))
					{
						$adminclient = $boxjwt.AdminClient($tokenreal, "401268528")
						$adminclient2 = $boxjwt2.AdminClient($tokenreal2, "401268528")
					}
					#authenticates to box under the context of the terminated user's manager.  Sets the "destination account" as the terminated user's manager's box account.
					Else
					{
						$adminclient = $boxjwt.AdminClient($tokenreal, "$manid")
						$adminclient2 = $boxjwt2.AdminClient($tokenreal2, "$manid")
					}
					
					$adminclient
					#$boxconfig2 = New-Object -TypeName Box.V2.Config.Boxconfig($clientid2, $clientSecret2, $enterpriseID2, $privateKey2, $passphrase2, $publicKeyID2)
					#$boxJWT2 = New-Object -TypeName Box.V2.JWTAuth.BoxJWTAuth($boxconfig2)
					#$boxjwt2
					
					#authenticates to box under the context of the main admin account if terminated user is on legal hold or if the terminated user's manager does not have a box account.  Sets the "destination account" as the main box admin account.
					
					$adminclient2
					$curfoldi = $adminclient.FoldersManager.GetFolderItemsAsync("0", 1000, 0)
					$curfoldi.Wait()
					foreach ($curfoli in $curfoldi.Result.entries)
					{
						If ($curfoli.Name -like "$departinguser's onedrive files")
						{
							$thedelete = $adminclient.FoldersManager.DeleteAsync($curfoli.id, $true)
							$thedelete.Wait()
						}
					}
					#the below code runs if the user has onedrive files but does not have a box account.  In short, this section will scan all of the items in the terminated user's onedrive, then
					#re-create the directory structure of the terminated user's onedrive in a newly created folder in either the terminated user's manager's box account (if the terminated user's manager has a
					#box account and the terminated user is not on legal hold) or the main box admin account (if the terminated user's manager does not have a box account or if the terminated user is on legal hold),
					#and then, file by file, will download the file from the terminated user's onedrive to the local machine (in a folder called "onedrivefiles" in user's temp directory) and then upload the
					#downloaded file to the correct folder in the destination box account.
					Write-Output "Connecting to user's onedrive account"
					Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tConnecting to user's onedrive account" | Out-File $env:APPDATA\termuser\$logfile -Append
					Connect-MsolService -Credential $credentials
					
					$InitialDomain = Get-MsolDomain | Where-Object { $_.IsInitial -eq $true }
					
					$SharePointAdminURL = "https://$($InitialDomain.Name.Split(".")[0])-admin.sharepoint.com"
					
					$departingUserUnderscore = $departinguser -replace "[^a-zA-Z0-9]", "_"
					
					$departingOneDriveSite = "https://$($InitialDomain.Name.Split(".")[0])-my.sharepoint.com/personal/$departingUserUnderscore"
					Write-Host "`nConnecting to SharePoint Online" -ForegroundColor Blue
					Connect-SPOService -Url $SharePointAdminURL -Credential $credentials
					
					Write-Host "`nAdding $globaladmin as site collection admin on both OneDrive site collections" -ForegroundColor Blue
					# Set current admin as a Site Collection Admin on both OneDrive Site Collections
					Set-SPOUser -Site $departingOneDriveSite -LoginName $globaladmin -IsSiteCollectionAdmin $true
					
					Write-Host "`nConnecting to $departinguser's OneDrive via SharePoint Online PNP module" -ForegroundColor Blue
					
					Connect-PnPOnline -Url $departingOneDriveSite -Credentials $credentials
					
					Write-Host "`nGetting display name of $departinguser" -ForegroundColor Blue
					# Get name of departing user to create folder name.
					$departingOwner = Get-PnPSiteCollectionAdmin | Where-Object { $_.loginname -match $departinguser }
					
					# If there's an issue retrieving the departing user's display name, set this one.
					if ($departingOwner -contains $null)
					{
						$departingOwner = @{
							Title	  = "Departing User"
						}
					}
					
					# Define relative folder locations for OneDrive source and destination
					$departingOneDrivePath = "/personal/$departingUserUnderscore/Documents"
					$destinationOneDriveSiteRelativePath = "Documents/$($departingOwner.Title)'s Files"
					
					Write-Host "`nGetting all items from $($departingOwner.Title)" -ForegroundColor Blue
					# Obtain a list of all items in terminated user's OneDrive
					$items = Get-PnPListItem -List Documents -PageSize 1000
					#define directory on local machine which onedrive files will be temporarily
					#saved to before uploading them to the destination box account
					$localbase = "$env:TEMP\onedrivefiles"
					If (!(Test-path $localbase))
					{
						New-item $localbase -ItemType Directory -Force
					}
					#Below code runs if the user is on legal hold.  This defines the name and location of the folder which will act as the root directory where the onedrive files will be stored and creates the folder in box
					If ($litighold.LitigationHoldEnabled -eq $true)
					{
						#if user is on legal hold, the folder containing the terminated user's onedrive content should be located in the "legal holds" directory.
						$createfolreq = @{
							name    = "$departinguser's onedrive files"
							parent  = @{
								id	   = "22707076963"
							}
						}
					}
					#Below code runs if the terminated user is not on legal hold
					Else
					#if the terminated user is not on legal hold, then the terminated user's onedrive content should be stored in the root directory of the account to which it is being uploaded.
					{
						$createfolreq = @{
							name	 = "$departinguser's onedrive files"
							parent   = @{
								id	   = "0"
							}
						}
					}
					#creates the folder
					$createboxfol = $adminclient.FoldersManager.CreateAsync($createfolreq)
					$createboxfol.Wait()
					$boxrootfolid = $createboxfol.Result.Id
					$errorarray = New-Object System.Collections.ArrayList
					$follist = New-object System.Collections.ArrayList
					#loops through all objects in terminated user's onedrive
					foreach ($item in $items)
					{
						$rel = $null
						$tempidd = $null
						$haserror = $false
						#checks to see the tyoe of the current object in the list of objects 
						#in the terminated user's Onedrive (file or directory).  Below block
						#executes if the object is a directory
						If ($item.Fieldvalues.FSObjType -eq 1)
						{
							#creates a custom powershell object and assigns all important
							#information concerning the directory to properties of the object
							#and adds the custom object to an array.
							$createfolreq = $null
							$psob = New-Object -TypeName PSObject
							$psob | Add-Member -MemberType NoteProperty -Name "FullPath" -Value $item.FieldValues.FileRef
							$psob | Add-member -MemberType NoteProperty -Name "ParentPath" -Value $item.FieldValues.FileDirRef
							$psob | Add-member -MemberType NoteProperty -Name "FileName" -Value $item.FieldValues.FileLeafRef
							#checks to see if the directory is located in the terminated user's root
							#Onedrive directory.  If it is, creates a folder with the same name in 
							#the root of the recently created folder meant to house terminated user's
							#one drive content in the destination box account.
							If ($item.FieldValues.FileDirRef -eq $departingOneDrivePath)
							{
								$createfolreq = @{
									name   = "$($item.FieldValues.FileLeafRef)"
									parent = @{
										id	   = "$boxrootfolid"
									}
								}
							}
							#if the directory is not located in the root of the terminated user's
							#onedrive, it loops through all of the folders that have been created
							#in the terminated user's box account and looks for an object in the array
							#whose full path is equal to the full path of the parent directory of the 
							#current onedrive object being processed in the loop (to determine the id 
							#of the folder's parent so current object can be correctly created in the destination box account)
							Else
							{
								
								Foreach ($folderr in $follist)
								{
									If ($folderr.fullpath -eq $item.FieldValues.FileDirRef)
									{
										$tempidd = $folderr.Id
										Break
									}
								}
								If ($tempidd -eq $null)
								{
									$haserror = $true
								}
								$createfolreq = @{
									name   = "$($item.FieldValues.FileLeafRef)"
									parent = @{
										id	   = "$tempidd"
									}
								}
							}
							If ($haserror -eq $true)
							{
								$errorarray.Add($item)
								Continue
							}
							Else
							{
								#creates the new folder in the destination box account, preserving 
								#the directory structure.
								$foldproc = $adminclient.FoldersManager.CreateAsync($createfolreq)
								$foldproc.Wait()
								$theid = $foldproc.Result.Id
								$psob | Add-Member -MemberType NoteProperty -Name "Id" -Value $theid
								$follist.Add($psob)
							}
						}
					}
					If ($errorarray.Count -gt 0)
					{
						Do
						{
							$tempstore = New-Object System.Collections.ArrayList
							foreach ($item in $errorarray)
							{
								$rel = $null
								#checks to see the tyoe of the current object in the list of objects 
								#in the terminated user's Onedrive (file or directory).  Below block
								#executes if the object is a directory
								If ($item.Fieldvalues.FSObjType -eq 1)
								{
									#creates a custom powershell object and assigns all important
									#information concerning the directory to properties of the object
									#and adds the custom object to an array.
									$createfolreq = $null
									$tempidd = $null
									$haserror = $false
									$psob = New-Object -TypeName PSObject
									$psob | Add-Member -MemberType NoteProperty -Name "FullPath" -Value $item.FieldValues.FileRef
									$psob | Add-member -MemberType NoteProperty -Name "ParentPath" -Value $item.FieldValues.FileDirRef
									$psob | Add-member -MemberType NoteProperty -Name "FileName" -Value $item.FieldValues.FileLeafRef
									#checks to see if the directory is located in the terminated user's root
									#Onedrive directory.  If it is, creates a folder with the same name in 
									#the root of the recently created folder meant to house terminated user's
									#one drive content in the terminated user's box account. 
									If ($item.FieldValues.FileDirRef -eq $departingOneDrivePath)
									{
										$createfolreq = @{
											name    = "$($item.FieldValues.FileLeafRef)"
											parent  = @{
												id	   = "$boxrootfolid"
											}
										}
									}
									#if the directory is not located in the root of the terminated user's
									#onedrive, it loops through all of the folders that have been created
									#in the terminated user's box account and looks for an object in the array
									#whose full path is equal to the full path of the parent directory of the 
									#current onedrive object being processed in the loop (to determine the id 
									#of the folder's parent so current object can be correctly placed)
									Else
									{
										
										Foreach ($folderr in $follist)
										{
											If ($folderr.fullpath -eq $item.FieldValues.FileDirRef)
											{
												$tempidd = $folderr.Id
												Break
											}
										}
										If ($tempidd -eq $null)
										{
											$haserror = $true
										}
										$createfolreq = @{
											name	 = "$($item.FieldValues.FileLeafRef)"
											parent   = @{
												id	   = "$tempidd"
											}
										}
									}
									If ($haserror -eq $true)
									{
										$tempstore.Add($item)
										Continue
									}
									Else
									{
										#creates the new folder in the terminated user's box account, preserving 
										#the directory structure.
										Write-Output "Creating directories in $departinguser's onedrive"
										Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tCreating directories in $departinguser's onedrive" | Out-File $env:APPDATA\termuser\$logfile -Append
										$foldproc = $adminclient.FoldersManager.CreateAsync($createfolreq)
										$foldproc.Wait()
										$theid = $null
										$theid = $foldproc.Result.Id
										$psob | Add-Member -MemberType NoteProperty -Name "Id" -Value $theid
										$follist.Add($psob)
									}
								}
							}
							$errorarray = $tempstore
						}
						Until ($errorarray.Count -eq 0)
					}
					#below code executes when the onedrive object currently being processed in the
						#list is a file.
					foreach ($item in $items)
					{
						$rel = $null
						#checks to see the tyoe of the current object in the list of objects 
						#in the terminated user's Onedrive (file or directory).  Below block
						#executes if the object is a directory
						If ($item.Fieldvalues.FSObjType -eq 0)
						{
							#downloads the file to local machine
							Try
							{
								Get-PnPFile -Url $item.FieldValues.FileRef -Path $localbase -Filename $item.FieldValues.FileLeafRef -AsFile -force -ErrorAction Stop
								Write-Output "$($item.FieldValues.FileRef) downloaded successfully."
								Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($item.FieldValues.FileRef) downloaded successfully." | Out-File $env:APPDATA\termuser\$logfile -Append
								Start-Sleep 3
							}
							Catch
							{
								Write-Output "$($item.FieldValues.FileRef) did not download successfully.  You will either have to re-run the script or obtain the file manually."
								Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($item.FieldValues.FileRef) did not download successfully.  You will either have to re-run the script or obtain the file manually." | Out-File $logpath -Append
								Continue
							}
							#determines the id of the directory the file should be stored in in the
							#destination box account by comparing the parent directory of the
							#current onedrive object to the full path of the directories saved to
							#an array
							$tempidd = $null
							If ($item.FieldValues.FileDirRef -eq $departingOneDrivePath)
							{
								$request = @{
									name	 = "$($item.FieldValues.FileLeafRef)"
									parent   = @{
										id	   = "$boxrootfolid"
									}
								}
							}
							Else
							{
								Foreach ($folderr in $follist)
								{
									If ($folderr.fullpath -eq $item.FieldValues.FileDirRef)
									{
										$tempidd = $folderr.Id
										Break
									}
								}
								$request = @{
									name	 = "$($item.FieldValues.FileLeafRef)"
									parent   = @{
										id	   = "$tempidd"
									}
								}
							}
							#upload the file to the appropriate folder in destination box account
							Do
							{
								$timespan = New-Object System.TimeSpan -ArgumentList 0, 15, 0
								$localfile = $null
								$localfile = [System.IO.File]::OpenRead("$localbase\$($item.FieldValues.FileLeafRef)")
								$uploadbox = $adminclient.FilesManager.UploadAsync($request, $localfile, $null, $timespan)
								$uploadbox.Wait()
								$uploadbox.Result
							}
							Until ($uploadbox.Status -like "RanToCompletion")
							#If ($localfile -eq $null)
							#{
							#	Write-Output "$($item.FieldValues.FileRef) did not upload to box successfully.  This usually happens with very large files and the attempted upload simply timed out."
							#	Write-Output "$($item.FieldValues.FileRef) did not upload to box successfully.  This usually happens with very large files and the attempted upload simply timed out." | Out-File $env:APPDATA\termuser\$logfile -Append
							#	Remove-Item "$localbase\$($item.FieldValues.FileLeafRef)" -Force
							#	Continue
							#}
							#Else
							#{
							If ($uploadbox.status -like "Faulted")
								{
									Write-Output "$($item.FieldValues.FileRef) did not upload to box successfully.  This usually happens with very large files and the attempted upload simply timed out."
								Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($item.FieldValues.FileRef) did not upload to box successfully.  This usually happens with very large files and the attempted upload simply timed out." | Out-File $env:APPDATA\termuser\$logfile -Append
								}
								Else
								{
								Write-Output "$($item.FieldValues.FileRef) uploaded to box successfully"
								Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($item.FieldValues.FileRef) uploaded to box successfully" | Out-File $env:APPDATA\termuser\$logfile -Append
								}
								#delete file on local machine after it has processed.
								Remove-Item "$localbase\$($item.FieldValues.FileLeafRef)" -Force
							#}
						}
					}
					#below code runs when the terminated user is on legal hold and generates an email to legal team to inform them the terminated user's files are available for them to access.
					If ($litighold.LitigationHoldEnabled -eq $true)
					{
						$body = "To whom this may concern,<br />The box files for $($user.DisplayName), which have been placed on legal hold, are now available for you to access in the `"legal hold`" box folder.  If you have any questions, submit a ticket in cherwell.<br />Box Administrator"
						Send-boxemail -toAddress "Lawyer.Lady@AcuityBrands.com" -subject "$($user.DisplayName)'s Onedrive files" -body $body
						$holdtext = "OneDrive files for $($user.DisplayName) moved to legal hold folder, $($user.DisplayName)'s box account has been deleted, disabled $($user.DisplayName)'s Active Directory account, and moved the Active Directory account to the terminated Organizational Unit."
						Write-Output "OneDrive files in $($user.DisplayName)'s account have been moved to the legal hold folder and disabled $($user.DisplayName)'s Active Directory account and moved it to the terminated Organizational Unit."
						Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tOneDrive files in $($user.DisplayName)'s account have been moved to the legal hold folder and disabled $($user.DisplayName)'s Active Directory account and moved it to the terminated Organizational Unit." | Out-File $env:APPDATA\termuser\$logfile -Append
					}
					#below code runs if the user is not on legal hold
					Else
					{
						#below code runs if the terminated user's manager has a box account.
						If ($manid -ne $null)
						{
							#configure the folder holding the terminated user's files so that it can be synced to manager's machine using box sync if the application is installed.
							$foldoptio = New-Object Box.V2.Models.BoxFolderRequest
							$foldoptio.Id = $boxrootfolid
							$foldoptio.SyncState = "synced"
							$of = $adminclient.FoldersManager.UpdateInformationAsync($foldoptio)
							$of.Wait()
							$of.Result
							#send an email to the terminated user's manager letting them know the terminated user's files are available for them to access.
							$body = "$($manager.GivenName),<br />This email is to notify you that $($user.DisplayName)'s onedrive files have been transfered into your box account.  Please login to your box account (or check your box sync folder if you have box sync installed on your machine) to view the files at your earliest convenience.  THank you.<br />Box Administrator"
							Send-boxemail -toAddress $manager.Mail -subject "$($user.DisplayName)'s onedrive files" -body $body
							Write-Output "Onedrive files for $($user.DisplayName) moved to manager's box folder and disabled $($user.DisplayName)'s Active Directory account and moved it to the terminated Organizational Unit."
							Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tOnedrive files for $($user.DisplayName) moved to manager's box folder and disabled $($user.DisplayName)'s Active Directory account and moved it to the terminated Organizational Unit." | Out-File $env:APPDATA\termuser\$logfile -Append
							$holdtext = "Onedrive files for $($user.DisplayName) moved to manager's box folder and disabled $($user.DisplayName)'s Active Directory account and moved it to the terminated Organizational Unit."
						}
						#below code runs if the terminated user's manager does not have a box account
						Else
						{
							#below code runs if the terminated user's ad account had a value associated with the manager property
							If ($manmail -ne $null)
							{
								#creates a share link to allow full access to the contents of the terminated user's onedrive content
								$sharejson = [Box.V2.Models.BoxSharedLinkRequest]::new()
								$sharejson.Access = "open"
								$sharelink = $adminclient.FoldersManager.CreateSharedLinkAsync($boxrootfolid, $sharejson)
								#$sharelink = box shared-links create $foldid folder --as-user 401268528 --can-download --json | Convertfrom-json
								$sharelink.Wait()
								#send terminated user's manager an email with the share link and informing the manager that the terminated user's files are available for access using the share link
								$link = $sharelink.Result.SharedLink.Url
								$deldate = (Get-Date).AddDays(7)
								$body = "$($manager.GivenName),<br />This is an email to inform you that $($user.DisplayName)'s onedrive files are available for you to access.  However, it appears that you do not have a box account, but you can still access and download $($user.DisplayName)'s files using the below url.  However, please download these files as soon as you are able, as the files will be deleted on $($deldate.DateTime).<br />$link<br />Box Administrator"
								Send-boxemail -toAddress $manager.Mail -subject "$($user.DisplayName)'s onedrive files" -body $body
								Write-Output "Onedrive files for $($user.DisplayName) moved to root folder of main admin account, a shared link was shared with $($user.DisplayName)'s manager, and $($user.DisplayName)'s Active Directory account has been disabled and moved to the terminated Organizational Unit."
								Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tOnedrive files for $($user.DisplayName) moved to root folder of main admin account, a shared link was shared with $($user.DisplayName)'s manager, and $($user.DisplayName)'s Active Directory account has been disabled and moved to the terminated Organizational Unit." | Out-File $env:APPDATA\termuser\$logfile -Append
								$holdtext = "Onedrive files for $($user.DisplayName) moved to root folder of main admin account, a shared link was shared with $($user.DisplayName)'s manager, and $($user.DisplayName)'s Active Directory account has been disabled and moved to the terminated Organizational Unit."
							}
							#below code runs if the terminated user's ad account did not have a value associated with the manager property
							Else
							{
								Write-Output "Onedrive files for $($user.DisplayName) are in the box main admin account, as $($user.DisplayName) was not assigned a manager in AD.  $($user.DisplayName)'s Active Directory account has been disabled and moved to the terminated Organizational Unit."
								Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tOnedrive files for $($user.DisplayName) are in the box main admin account, as $($user.DisplayName) was not assigned a manager in AD.  $($user.DisplayName)'s Active Directory account has been disabled and moved to the terminated Organizational Unit." | Out-File $env:APPDATA\termuser\$logfile -Append
								$holdtext = "Onedrive files for $($user.DisplayName) are in the box main admin account, as $($user.DisplayName) was not assigned a manager in AD.  $($user.DisplayName)'s Active Directory account has been disabled and moved to the terminated Organizational Unit."
							}
						}
					}
				}
				#below code runs if the terminated user does not have any box or onedrive files.
				Else
				{
					Write-Output "$($user.DisplayName) does not have any Box or Onedrive files.  $($user.DisplayName)'s Active Directory account has been disabled and moved to the terminated Organizational Unit."
					Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`t$($user.DisplayName) does not have any Box or Onedrive files.  $($user.DisplayName)'s Active Directory account has been disabled and moved to the terminated Organizational Unit." | Out-File $env:APPDATA\termuser\$logfile -Append
				}
			}
			$body2 = "To whom this may concern,<br />This email is to inform you that $($user.DisplayName) is no longer with the company.  This is a notification email only and no action is required.<br />The termination script"
			Send-boxemail -toAddress "Learning@acuitybrands.com" -subject "$($user.DisplayName) is no longer with the company" -body $body2
			#$holdtext = "The $($user.DisplayName) you specified does not have a box account.  As a result, the user's ad account will be disabled and moved to the terminated users organizational unit only."
			#Moves the user's ad account to the "terminated" ou, sets the account's expiration date, hides the account from the global address list, and disables the account.
			Write-Output "Disabling $($user.DisplayName)'s Active Directory account and moving it to OU=Terminated,OU=CORPORATE,OU=ALG Users,DC=AcuityLightingGroup,DC=com"
			Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tDisabling $($user.DisplayName)'s Active Directory account and moving it to OU=Terminated,OU=CORPORATE,OU=ALG Users,DC=AcuityLightingGroup,DC=com" | Out-File $env:APPDATA\termuser\$logfile -Append
			$today = (Get-date).ToString()
			$describe = $null
			If ($user.Description -eq $null)
			{
				If ($ticketnumber -ne $null)
				{
					$describe = "Disabled - $today - SM#$ticketnumber - $env:USERNAME"
				}
				Else
				{
					$describe = "Disabled - $today - $env:USERNAME"
				}
			}
			Else
			{
				If ($ticketnumber -ne $null)
				{
					$describe = "$($user.Description).  Disabled - $today - SM#$ticketnumber - $env:USERNAME"
				}
				Else
				{
					$describe = "$($user.Description).  Disabled - $today - $env:USERNAME"
				}
			}
			Connect-MsolService -Credential $credentials
			Write-Output "Configuring $($user.DisplayName)'s office 365 account to block sign in."
			Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tConfiguring $($user.DisplayName)'s office 365 account to block sign in." | Out-File $env:APPDATA\termuser\$logfile -Append
			Get-MsolUser -UserPrincipalName $user.Userprincipalname | Set-MsolUser -BlockCredential $true
			Write-Output "Configuring $($user.DisplayName)'s ad account to hide it from address book, set expiration date, set the description, and disable it"
			Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tConfiguring $($user.DisplayName)'s ad account to hide it from address book, set expiration date, set the description, and disable it" | Out-File $env:APPDATA\termuser\$logfile -Append
			Set-ADUser $useraccount -Enabled:$false -Description $describe -AccountExpirationDate (Get-Date).AddDays(14) -Add @{ msExchHideFromAddressLists = "TRUE" } -Confirm:$false
			$adobpath = (Get-ADUser $useraccount -Properties *).DistinguishedName
			Move-ADObject -Identity $adobpath -TargetPath "OU=Terminated,OU=CORPORATE,OU=ALG Users,DC=AcuityLightingGroup,DC=com" -Confirm:$false
			#initiates a azure ad sync to push the on prem changes up to azure.
			Write-Output "Initiating azure ad sync to syncronize changes to azure"
			Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tInitiating azure ad sync to syncronize changes to azure" | Out-File $env:APPDATA\termuser\$logfile -Append
			Invoke-Command -ComputerName "ad-connect-01" -ScriptBlock {
				Start-ADSyncSyncCycle -PolicyType Delta
			}
			<#
			Connect-MsolService -Credential $credentials
			$connect = Connect-MsolService -Credential $credentials
			$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://outlook.office365.com/powershell-liveid/ -Credential $credentials -Authentication Basic -AllowRedirection
			#$Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri https://ps.compliance.protection.outlook.com/powershell-liveid/ -Credential $cred2 -Authentication Basic -AllowRedirection
			Import-PSSession $Session
			Get-MsolUser -All -SearchString $user.SamAccountName | Set-MsolUser -BlockCredential $false
			$litighold = Get-Mailbox -Identity $user.UserPrincipalName
			Connect-AzureAD -Credential $credentials
			Revoke-AzureADUserAllRefreshToken -ObjectId $user.UserPrincipalName
			$output = Get-Mailbox -Identity $user.UserPrincipalName | Set-CASMailbox -ActiveSyncEnabled $False -OWAforDevicesEnabled $false
			Write-Output $output
			Write-Output $output | Out-File $env:APPDATA\termuser\$logfile -Append
			Disconnect-AzureAD
			Get-PSSession | Remove-PSSession
			#>
			<#
			$stillrunning = Get-Job -Name 'transferonedrive'
			If ($stillrunning.state -eq "running")
			{
				Write-Output "The transfer"
				Write-Output $output | Out-File $env:APPDATA\termuser\$logfile -Append
				$running = $null
				Do
				{
					
				}
			}
			#>
		} -CompletedScript {
			param ($job)
			$buttonCancel.Enabled = $false
			$textbox1.Clear()
			$button1.Enabled = $true
			$statusbar1.Text = "idle"
			Write-Output "The termination script has finished running."
			Write-Output "[$((Get-Date).Month)/$((Get-Date).Day)/$((Get-Date).Year) @ $((Get-Date).Hour):$((Get-Date).Minute)]`tThe termination script has finished running." | Out-File "$env:APPDATA\termuser\termuser.txt" -Append
			Send-SyslogMessage -Server acomputer.acuitylightinggroup.com -Severity Informational -Facility logaudit -Hostname $env:COMPUTERNAME -ApplicationName Powershell -Transport TCP -FramingMethod Octet-Counting -Port 514 -Message "User: $env:USERDOMAIN\$env:USERNAME App: remove-departeduser Message: `"$env:USERDOMAIN\$env:USERNAME has completed the termination procedure for user $($textbox1.Text).  In other words, the termination script ran to completion.`""
			Close-withhandle -Path "$env:APPDATA\termuser" -Download -AcceptEULA -RemoveExecutable -verbose
			If (!(Test-Path "$env:APPDATA\termuser\oldlogs"))
			{
				New-Item -Name "oldlogs" -Path "$env:APPDATA\termuser" -ItemType Directory -Force
			}
			$date = (get-date -uformat "%Y-%m-%d@%H-%M-%S").ToString()
			$newlog = "termuser-$date.txt"
			$body = "Hello.  This email was sent to inform you that $env:USERNAME ran the termination script.  Attached is the log file that was generated by the script when it was run.  Let William know if you have any concerns/information you would like to see included in the log.<br />User Termination Script."
			Rename-Item -NewName $newlog -Path "$env:APPDATA\termuser\termuser.txt" -Force
			Send-boxemail -toAddress "amanager@AcuityBrands.com" -ntoAddress "me@acuitybrands.com" -subject "User Termination Script was run" -body $body -attachments "$env:APPDATA\termuser\$newlog"
			Start-Process "notepad.exe" -ArgumentList "$env:APPDATA\termuser\$newlog"
			#$logcontent = Get-Content "$env:TEMP\usertermlog.txt" -Raw
			[void][System.Windows.Forms.MessageBox]::Show('The user termination has finished processing.  Review log for details.', 'Complete', "ok", "Information") # Casting the method to [void] suppresses the output.
		} -UpdateScript {
			param ($job)
			$receive = Receive-Job -Job $job | Select-Object -Last 1
			If ($receive -is [String])
			{
				Write-Output $receive
			}
			$filecont = Get-Content "$env:APPDATA\termuser\termuser.txt" | Select-Object -Last 1
			If ($statustext -ne $filecont)
			{
				$statustext = $filecont
				Write-Output "$statustext"
				$statusbar1.Text = "$statustext"
			}
		} -ArgumentList $atext, $ScriptDirectory, $scriptname, $globaladmin, $encrps, $key, $textbox2.Text, $logfile
	}
	
	$formRemovedeparteduser_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
		#TODO: Place custom script here
		Stop-JobTracker
		If ($buttonCancel.Enabled -eq $true)
		{
			Send-SyslogMessage -Server acomputer.acuitylightinggroup.com -Severity Alert -Facility logaudit -Hostname $env:COMPUTERNAME -ApplicationName Powershell -Transport TCP -FramingMethod Octet-Counting -Port 514 -Message "User: $env:USERDOMAIN\$env:USERNAME App: remove-departeduser Message: `"$env:USERDOMAIN\$env:USERNAME terminated the termination process for user $($textbox1.Text) prematurely.  In other words, the termination script did not run to completion due to the process being terminated by the user.`""
		}
	}
	
	$buttonCancel_Click = {
		#TODO: Place custom script here
		Stop-JobTracker
		$button1.Enabled = $true
		$buttonCancel.Enabled = $false
		$textbox1.Clear()
		$statusbar1.Text = "Idle"
		Send-SyslogMessage -Server acomputer.acuitylightinggroup.com -Severity Alert -Facility logaudit -Hostname $env:COMPUTERNAME -ApplicationName Powershell -Transport TCP -FramingMethod Octet-Counting -Port 514 -Message "User: $env:USERDOMAIN\$env:USERNAME App: remove-departeduser Message: `"$env:USERDOMAIN\$env:USERNAME terminated the termination process for user $($textbox1.Text) prematurely.  In other words, the termination script did not run to completion due to the process being terminated by the user.`""
	}
	
	
	$timerJobTracker_Tick = {
		#TODO: Place custom script here
		Update-JobTracker
	}
	
	
	$formRemovedeparteduser_Load = {
		#TODO: Initialize Form Controls here
		Add-JobTracker -Name Startup -JobScript {
			param ($scriptdir,
				$scriptnamee
			)
			$sec = ConvertTo-SecureString 'vststokenpass' -AsPlainText -Force
			$necred = New-Object System.Management.Automation.PSCredential -ArgumentList "usertoken", $sec
			Get-PackageProvider -Name NuGet -ForceBootstrap -Force
			Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
	
			#install chocolatey
			iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
			import-module "C:\ProgramData\chocolatey\helpers\chocolateyInstaller.psm1" -Force
			Update-SessionEnvironment
			#install the latest version of the departmodule from the VSTS package feed.
			choco upgrade NuGet.commandline -y
			Update-SessionEnvironment
			NuGet update -self
			Install-Module Powershellget -Repository PSGallery -RequiredVersion 1.5.0.0 -Force -AllowClobber
			Remove-Module powershellget -Force
			Import-Module powershellget -RequiredVersion 1.5.0.0 -Force
			$repsource = Get-PackageSource -PackageManagementProvider Nuget -ProviderName PowerShellGet -Force -ForceBootstrap
			If ($repsource.Name -notcontains "EE")
			{
				NuGet Sources Add -Name "EE" -Source "https://vstsfeed.pkgs.visualstudio.com/_packaging/EE/nuget/v2/" -Username "usertoken" -Password 'vststokenpass' -storePasswordInClearText
			}
			$psrep = Get-PSRepository -Name "EE" -ErrorAction SilentlyContinue
			if ($psrep -eq $null)
			{
				Register-PSRepository -Name "EE" -SourceLocation "https://vstsfeed.pkgs.visualstudio.com/_packaging/EE/nuget/v2/" -Credential $necred -InstallationPolicy Trusted
			}
			$instmodule = $null
			$repmodule = $null
			#test to see if the departmodule is already present on the system.  If it is,
			#uninstall it.
			If (Test-Path $env:ProgramFiles\WindowsPowerShell\Modules\DepartModule)
			{
				#Remove-item -Path "$env:PROGRAMFILES\Windowspowershell\Modules\DepartModule" -Force -Recurse
				#$instmodule = Get-InstalledModule -Name Departmodule
				#$repmodule = Find-Module -Name DepartModule -Repository EE -Credential $necred
				#If ([System.Version]$repmodule.Version -gt [System.Version]$instmodule.Version)
				#{
					#Close-withhandle -Path "$env:PROGRAMFILES\Windowspowershell\Modules\DepartModule" -Download -AcceptEULA -RemoveExecutable -verbose
					
					#Uninstall-Module Departmodule -Force -AllVersions
					#Update-Module Departmodule -Force -Credential $necred
				Install-Module DepartModule -Repository "EE" -Force -AllowClobber -Credential $necred
				
				#}
			}
			Else
			{
				Install-Module DepartModule -Repository "EE" -Force -AllowClobber -Credential $necred
			}
			
			
			Import-Module DepartModule -Force
			If (!(Test-Path $env:ProgramFiles\WindowsPowerShell\Modules\ADSIPS))
			{
				Install-Module ADSIPS -Repository PSGallery -Force -AllowClobber
			}
			Else
			{
				$needsup = $true
				$vercheck = Find-module ADSIPS -Repository PSGallery
				$curmod = Get-module -ListAvailable -Name ADSIPS
				Foreach ($cur in $curmod)
				{
					If ([System.Version]$cur.Version -eq [System.Version]$vercheck.Version)
					{
						$needsup = $false
						Break
					}
					Else
					{
						Continue
					}
				}
				If ($needsup)
				{
					Update-Module ADSIPS -Force
				}
				Else
				{
					Write-Host "All good."
				}
				
			}
			#test to see if the Remote server administration tools are installed on the system.
			#If they are not, install them.
			$admod = $true
			Try
			{
				Import-Module Activedirectory -Force -ErrorAction Stop
			}
			Catch
			{
				$wmi = Get-WmiObject -Class Win32_OperatingSystem -Namespace Root\cimv2 -Property "caption"
				If ($wmi.caption -like "*server*")
				{
					Add-WindowsFeature -Name RSAT-AD-Tools
					Add-windowsFeature -Name RSAT-AD-PowerShell
				}
				Else
				{
					Install-RSATTools
				}
				Try
				{
					Import-Module ActiveDirectory -ErrorAction Stop -Force
				}
				Catch
				{
					$admod = $false
				}
			}
			#install posh-syslog powershell module, which allows powershell to create event logs
			#on a syslog server
			If (!(Test-Path $env:ProgramFiles\WindowsPowerShell\Modules\Posh-SYSLOG))
			{
				Install-Module Posh-SYSLOG -AllowClobber -Force -Repository "PSGallery"
			}
			Else
			{
				$needsup = $true
				$vercheck = Find-module Posh-SYSLOG -Repository PSGallery
				$curmod = Get-module -ListAvailable -Name Posh-SYSLOG
				Foreach ($cur in $curmod)
				{
					If ([System.Version]$cur.Version -eq [System.Version]$vercheck.Version)
					{
						$needsup = $false
						Break
					}
					Else
					{
						Continue
					}
				}
				If ($needsup)
				{
					Update-Module Posh-SYSLOG -Force
				}
				Else
				{
					Write-Host "All good."
				}
				
			}
			#check to see if the user who is running the script is a memeber of the security 
			#group which permits them to run this script.  If the user is not a member of the
			#security group or is not connected to acuity brands' domain, script will close
			$isdomainjoin = Get-WmiObject -Namespace Root\cimv2 -Class Win32_NTDomain -Property caption
			If (($isdomainjoin.caption -notcontains "LL_MAIN") -or ($isdomainjoin.caption -notcontains "ACUITYBRANDS"))
			{
				Start-sleep 3
				return "Not joined to AD"
			}
			If ($admod -eq $true)
			{
				Try
				{
					$members = Get-ADGroupMember -Identity "Authorized Powershell script" -erroraction Stop
					If ($members.SamAccountname -notcontains $env:USERNAME)
					{
						#[void][System.Windows.Forms.MessageBox]::Show('Error', 'Title') # Casting the method to [void] suppresses the output. "Error"
						Start-sleep 3
						return "Not in group"
					}
					Else
					{
						Write-host "User is in correct group"
					}
				}
				Catch
				{
					#[void][System.Windows.Forms.MessageBox]::Show('Error no ad', 'Title') # Casting the method to [void] suppresses the output. "Error"
					Start-sleep 3
					return "Not joined to AD"
				}
			}
			Else
			{
				$members = Get-ADSIGroupMember -Identity "Authorized Powershell script" -DomainName acuitylightinggroup.com -Recurse
				If ($members.SamAccountname -notcontains $env:USERNAME)
				{
					#[void][System.Windows.Forms.MessageBox]::Show('Error', 'Title') # Casting the method to [void] suppresses the output. "Error"
					Start-sleep 3
					return "Not in group"
				}
				Else
				{
					Write-host "User is in correct group"
				}
			}
		#install the sharepoint powershell console and Microsoft Online Services Sign-In Assistant
			#using custom created chocolatey packages
			choco upgrade serviceassistant --source https://www.myget.org/F/serviceassistant/api/v2 -y
			choco upgrade sharepointconsole --source https://www.myget.org/F/sharepointconsole/api/v2 -y
			Update-SessionEnvironment
			#installs a bunch of modules from the powershell gallery which are needed for this
			#script to successfully run.
			If (!(Test-Path "$env:ProgramFiles\WindowsPowerShell\Modules\Carbon"))
			{
				Install-module Carbon -Force -AllowClobber -Repository "PSGallery"
			}
			Else
			{
				$needsup = $true
				$vercheck = Find-module Carbon -Repository PSGallery
				$curmod = Get-module -ListAvailable -Name Carbon
				Foreach ($cur in $curmod)
				{
					If ([System.Version]$cur.Version -eq [System.Version]$vercheck.Version)
					{
						$needsup = $false
						Break
					}
					Else
					{
						Continue
					}
				}
				If ($needsup)
				{
					Update-Module Carbon -Force
				}
				Else
				{
					Write-Host "All good."
				}
			}
			If (!(Test-Path $env:ProgramFiles\WindowsPowerShell\Modules\SharePointPnPPowerShellOnline))
			{
				Install-Module SharePointPnPPowerShellOnline -AllowClobber -Force -Repository "PSGallery"
			}
			Else
			{
				$needsup = $true
				$vercheck = Find-module SharePointPnPPowerShellonline -Repository PSGallery
				$curmod = Get-module -ListAvailable -Name SharePointPnPPowerShellonline
				Foreach ($cur in $curmod)
				{
					If ([System.Version]$cur.Version -eq [System.Version]$vercheck.Version)
					{
						$needsup = $false
						Break
					}
					Else
					{
						Continue
					}
				}
				If ($needsup)
				{
					Update-Module SharePointPnPPowerShell* -Force
				}
				Else
				{
					Write-Host "All good."
				}
			}
			If (!(Test-Path $env:ProgramFiles\WindowsPowerShell\Modules\MSOnline))
			{
				Install-Module MSOnline -AllowClobber -Force -Repository "PSGallery"
			}
			Else
			{
				$needsup = $true
				$vercheck = Find-module MSOnline -Repository PSGallery
				$curmod = Get-module -ListAvailable -Name MSOnline
				Foreach ($cur in $curmod)
				{
					If ([System.Version]$cur.Version -eq [System.Version]$vercheck.Version)
					{
						$needsup = $false
						Break
					}
					Else
					{
						Continue
					}
				}
				If ($needsup)
				{
					Update-Module MSOnline -Force
				}
				Else
				{
					Write-Host "All good."
				}
			}
			If (!(Test-Path "$env:ProgramFiles\WindowsPowerShell\Modules\AzureAD"))
			{
				Install-Module AzureAD -AllowClobber -Force -Repository "PSGallery"
			}
			Else
			{
				$needsup = $true
				$vercheck = Find-module AzureAD -Repository PSGallery
				$curmod = Get-module -ListAvailable -Name AzureAD
				Foreach ($cur in $curmod)
				{
					If ([System.Version]$cur.Version -eq [System.Version]$vercheck.Version)
					{
						$needsup = $false
						Break
					}
					Else
					{
						Continue
					}
				}
				If ($needsup)
				{
					Update-Module AzureAD -Force
				}
				Else
				{
					Write-Host "All good."
				}
			}
			If (!(Test-Path "$env:ProgramFiles\WindowsPowerShell\Modules\AzureRM.KeyVault"))
			{
				Install-Module AzureRm -AllowClobber -Force -Repository "PSGallery"
			}
			else
			{
				$needsup = $true
				$vercheck = Find-module Azurerm -Repository PSGallery
				$curmod = Get-module -ListAvailable -Name Azurerm
				Foreach ($cur in $curmod)
				{
					If ([System.Version]$cur.Version -eq [System.Version]$vercheck.Version)
					{
						$needsup = $false
						Break
					}
					Else
					{
						Continue
					}
				}
				If ($needsup)
				{
					Update-module Azurerm -Force
				}
				Else
				{
					Write-Host "All good."
				}
			}
			If (!(Test-Path "$env:ProgramFiles\WindowsPowerShell\Modules\PoshInternals"))
			{
				Install-Module PoshInternals -AllowClobber -Force -Repository "PSGallery"
			}
			Else
			{
				$needsup = $true
				$vercheck = Find-module PoshInternals -Repository PSGallery
				$curmod = Get-module -ListAvailable -Name PoshInternals
				Foreach ($cur in $curmod)
				{
					If ([System.Version]$cur.Version -eq [System.Version]$vercheck.Version)
					{
						$needsup = $false
						Break
					}
					Else
					{
						Continue
					}
				}
				If ($needsup)
				{
					Update-Module PoshInternals -Force
				}
				Else
				{
					Write-Host "All good."
				}
			}
			Import-Module "$env:ProgramFiles\SharePoint Online Management Shell\Microsoft.Online.SharePoint.PowerShell" -Force
			#function from the departmodule which will scan the sharepoint site where this
			#script is hosted for this script, will determine if the version number of the script
			#hosted on the sharepoint site is higher than the script which is being executed,
			#and if the sharepoint script has a higher version number, function will download
			#the sharepoint script, delete this version of the script, and launch the more up
			#to date version.
			Get-PSSession | Remove-PSSession
			try
			{
				update-thisscript -scriptdirp $ScriptDir -scriptnamp $scriptnamee
			}
			Catch
			{
				[System.Version]$scrivers = (Get-ItemProperty "$scriptdir\$scriptnamee.exe").VersionInfo.fileversion
				[System.Version]$fallback = Get-Content "\\cdcsrvr2\apps\BOX\version\$scriptnamee.txt"
				If ($scrivers -ne $fallback)
				{
					return "Wrong version"
				}
				Else
				{
					return "Something wrong"
				}
			}
				<#
				If ($restart -eq $true)
				{
					return "The script needs to restart to update environment variables"
				}
				#>
			#$teppas = ConvertTo-SecureString $encrps -Key $key
			#$credentials = New-Object System.Management.Automation.PSCredential -ArgumentList $globaladmin, $teppas
		} -CompletedScript {
			param ($job)
			$results = Receive-Job -Job $job | Select-Object -Last 1
			Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
			#This block runs if the user is not connected to ad or not in the necessary security
			#group
			If ($results -like "Not in group")
			{
				Stop-JobTracker
				Send-SyslogMessage -Server acomputer.acuitylightinggroup.com -Severity Alert -Facility auth -Hostname $env:COMPUTERNAME -ApplicationName Powershell -Transport TCP -FramingMethod Octet-Counting -Port 514 -Message "User: $env:USERDOMAIN\$env:USERNAME App: remove-departeduser Message: `"The user $env:USERDOMAIN\$env:USERNAME tried to run the remove-departeduser script but was not a member of the group which permits them to do so.  Script has been forcibly terminated`""
				
				[void][System.Windows.Forms.MessageBox]::Show("You are not a member of the security group which can run this script (CN=Authorized Powershell script,OU=Groups,OU=Conyers,OU=ALG Users,DC=AcuityLightingGroup,DC=com) or you are not connected to Acuity Brands' domain.  Exiting", 'Do not have permission', "ok", 'Error') # Casting the method to [void] suppresses the output. 
				Get-Process -Name $scriptname | Stop-Process -Force
				throw "You are not a member of the security group which can run this script (CN=Authorized Powershell script,OU=Groups,OU=Conyers,OU=ALG Users,DC=AcuityLightingGroup,DC=com) or you are not connected to Acuity Brands' domain.  Exiting"
				Exit
			}
			elseif ($results -like "Not joined to AD")
			{
				Stop-JobTracker
				[void][System.Windows.Forms.MessageBox]::Show("You're device is not a member of the Acuity Brands domain and/or you are not connected to Acuity Brands's internal network, both of which are required to run this script.  Exiting", 'Not domain joined', "ok", 'Error') # Casting the method to [void] suppresses the output. 
				Get-Process -Name $scriptname | Stop-Process -Force
				throw "You're device is not a member of the Acuity Brands domain and/or you are not connected to Acuity Brands's internal network, both of which are required to run this script.  Exiting"
				Exit
			}
			elseif ($results -like "Wrong version")
			{
				Stop-JobTracker
				[void][System.Windows.Forms.MessageBox]::Show('For some reason, the script failed the auto-update process.  The script you are running is not the latest version.  Please manually download the latest version of the script from teams and re-run the script.', 'New version available', 'OK', 'Information') # Casting the method to [void] suppresses the output. 
				Get-Process -Name $scriptname | Stop-Process -Force
				throw "Download new version"
				Exit
			}
			elseif ($results -like "Something wrong")
			{
				Stop-JobTracker
				[void][System.Windows.Forms.MessageBox]::Show('An unknown error has occurred, as the script has failed the auto-update process.  Sources indicate that you are running the correct version of the script, so please let William Higgs know about this error.', 'Unknown error', 'OK', 'Information') # Casting the method to [void] suppresses the output. 
				Get-Process -Name $scriptname | Stop-Process -Force
				throw "Download new version"
				Exit
			}
				<#
				elseif (($results -is [System.String]) -and ($results -like "The script needs to restart to update environment variables"))
				{
					echo "timeout 4 && $ScriptDirectory\$scriptname" | Out-File $env:TEMP\rest.bat -encoding ascii -Force
					Start-Process $env:TEMP\rest.bat -NoNewWindow
					Stop-Process -Name $scriptname -Force
				}
				#>
			#This block runs when the prerequisite check ran without issue.
			Else
			{
				Send-SyslogMessage -Server acomputer.acuitylightinggroup.com -Severity Alert -Facility auth -Hostname $env:COMPUTERNAME -ApplicationName Powershell -Transport TCP -FramingMethod Octet-Counting -Port 514 -Message "User: $env:USERDOMAIN\$env:USERNAME App: remove-departeduser Message: `"$env:USERDOMAIN\$env:USERNAME has run the remove-departeduser script and has the necessary permissions to do so.  Script will be allowed to run.`""
				import-module "C:\ProgramData\chocolatey\helpers\chocolateyInstaller.psm1" -Force
				Update-SessionEnvironment
				Import-Module DepartModule -Force
				Import-Module "$env:ProgramFiles\SharePoint Online Management Shell\Microsoft.Online.SharePoint.PowerShell\Microsoft.Online.SharePoint.PowerShell.psd1" -Force
			}
			Try
			{
				Import-Module ActiveDirectory -Force -ErrorAction Stop
				$button1.Enabled = $true
				$statusbar1.Text = "Idle.  Ready for use."
			}
			Catch
			{
				$statusbar1.Text = "Error.  Correct issues and restart tool."
				start https://www.microsoft.com/en-us/download/details.aspx?id=45520
				[void][System.Windows.Forms.MessageBox]::Show("The Active Directory Powershell module, which is a major dependency that this script requires to function correctly, was not found on your system.  This means that the remote server administration tools failed to install on your machine during the prerequisite check.  Please mamually install the tools and/or ensure that the folder containing the Active Directory Powershell Module is in a directory in the `"PSModulePath`" environment variable.", 'Core Module Not found', "ok", 'Error') # Casting the method to [void] suppresses the output. 
			}
		} -ArgumentList $ScriptDirectory, $scriptname
			<#
			-UpdateScript {
				Param ($Job)
				$results = Receive-Job -Job $Job -Keep | Select-Object -Last 1
				If (($results -is [System.String]) -and (($results -like "Not joined to AD") -or ($results -like "Not in group")))
				{
					Stop-JobTracker
					Add-Type -AssemblyName "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
					[void][System.Windows.Forms.MessageBox]::Show("You are not a member of the security group which can run this script (CN=Authorized Powershell script,OU=Groups,OU=Conyers,OU=ALG Users,DC=AcuityLightingGroup,DC=com) or you are not connected to Acuity Brands' domain.  Exiting", 'Title', "ok", 'Error') # Casting the method to [void] suppresses the output. 
					throw "You are not a member of the security group which can run this script (CN=Authorized Powershell script,OU=Groups,OU=Conyers,OU=ALG Users,DC=AcuityLightingGroup,DC=com) or you are not connected to Acuity Brands' domain.  Exiting"
					Exit
				}
			}
			#>
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formRemovedeparteduser.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_textbox2 = $textbox2.Text
		$script:MainForm_textbox1 = $textbox1.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonCancel.remove_Click($buttonCancel_Click)
			$buttonSTART.remove_Click($buttonSTART_Click)
			$button1.remove_Click($button1_Click)
			$formRemovedeparteduser.remove_FormClosed($formRemovedeparteduser_FormClosed)
			$formRemovedeparteduser.remove_Load($formRemovedeparteduser_Load)
			$timerJobTracker.remove_Tick($timerJobTracker_Tick)
			$formRemovedeparteduser.remove_Load($Form_StateCorrection_Load)
			$formRemovedeparteduser.remove_Closing($Form_StoreValues_Closing)
			$formRemovedeparteduser.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formRemovedeparteduser.SuspendLayout()
	#
	# formRemovedeparteduser
	#
	$formRemovedeparteduser.Controls.Add($textbox2)
	$formRemovedeparteduser.Controls.Add($labelTicketNumber)
	$formRemovedeparteduser.Controls.Add($buttonCancel)
	$formRemovedeparteduser.Controls.Add($statusbar1)
	$formRemovedeparteduser.Controls.Add($buttonSTART)
	$formRemovedeparteduser.Controls.Add($button1)
	$formRemovedeparteduser.Controls.Add($textbox1)
	$formRemovedeparteduser.Controls.Add($labelUser)
	$formRemovedeparteduser.AutoScaleDimensions = '6, 13'
	$formRemovedeparteduser.AutoScaleMode = 'Font'
	$formRemovedeparteduser.ClientSize = '366, 143'
	$formRemovedeparteduser.Name = 'formRemovedeparteduser'
	$formRemovedeparteduser.Text = 'remove-departeduser'
	$formRemovedeparteduser.add_FormClosed($formRemovedeparteduser_FormClosed)
	$formRemovedeparteduser.add_Load($formRemovedeparteduser_Load)
	#
	# textbox2
	#
	$textbox2.Location = '99, 50'
	$textbox2.Name = 'textbox2'
	$textbox2.Size = '171, 20'
	$textbox2.TabIndex = 7
	#
	# labelTicketNumber
	#
	$labelTicketNumber.AutoSize = $True
	$labelTicketNumber.Location = '12, 53'
	$labelTicketNumber.Name = 'labelTicketNumber'
	$labelTicketNumber.Size = '81, 17'
	$labelTicketNumber.TabIndex = 6
	$labelTicketNumber.Text = 'Ticket Number:'
	$labelTicketNumber.UseCompatibleTextRendering = $True
	#
	# buttonCancel
	#
	$buttonCancel.Enabled = $False
	$buttonCancel.Location = '220, 85'
	$buttonCancel.Name = 'buttonCancel'
	$buttonCancel.Size = '75, 29'
	$buttonCancel.TabIndex = 5
	$buttonCancel.Text = 'Cancel'
	$buttonCancel.UseCompatibleTextRendering = $True
	$buttonCancel.UseVisualStyleBackColor = $True
	$buttonCancel.add_Click($buttonCancel_Click)
	#
	# statusbar1
	#
	$statusbar1.Location = '0, 121'
	$statusbar1.Name = 'statusbar1'
	$statusbar1.Size = '366, 22'
	$statusbar1.TabIndex = 4
	$statusbar1.Text = 'Script is running prerequisite check.  Please wait....'
	#
	# buttonSTART
	#
	$buttonSTART.Enabled = $False
	$buttonSTART.Location = '81, 85'
	$buttonSTART.Name = 'buttonSTART'
	$buttonSTART.Size = '75, 30'
	$buttonSTART.TabIndex = 3
	$buttonSTART.Text = 'START'
	$buttonSTART.UseCompatibleTextRendering = $True
	$buttonSTART.UseVisualStyleBackColor = $True
	$buttonSTART.add_Click($buttonSTART_Click)
	#
	# button1
	#
	$button1.Enabled = $False
	$button1.Location = '276, 15'
	$button1.Name = 'button1'
	$button1.Size = '59, 23'
	$button1.TabIndex = 2
	$button1.Text = '....'
	$button1.UseCompatibleTextRendering = $True
	$button1.UseVisualStyleBackColor = $True
	$button1.add_Click($button1_Click)
	#
	# textbox1
	#
	$textbox1.Location = '71, 15'
	$textbox1.Name = 'textbox1'
	$textbox1.ReadOnly = $True
	$textbox1.Size = '199, 20'
	$textbox1.TabIndex = 1
	#
	# labelUser
	#
	$labelUser.AutoSize = $True
	$labelUser.Location = '34, 18'
	$labelUser.Name = 'labelUser'
	$labelUser.Size = '31, 17'
	$labelUser.TabIndex = 0
	$labelUser.Text = 'User:'
	$labelUser.UseCompatibleTextRendering = $True
	#
	# timerJobTracker
	#
	$timerJobTracker.add_Tick($timerJobTracker_Tick)
	$formRemovedeparteduser.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formRemovedeparteduser.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formRemovedeparteduser.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formRemovedeparteduser.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formRemovedeparteduser.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formRemovedeparteduser.ShowDialog()

}
#endregion Source: MainForm.psf

#Start the application
Main ($CommandLine)
